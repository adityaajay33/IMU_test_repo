
IMU_SPI_ADITYA_AJAY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aec  08004aec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004aec  08004aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004af4  08004af4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004a14  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004a24  20004a24  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012b83  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002aff  00000000  00000000  00032c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001018  00000000  00000000  00035708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c67  00000000  00000000  00036720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003465  00000000  00000000  00037387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011494  00000000  00000000  0003a7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0b31  00000000  00000000  0004bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004314  00000000  00000000  0011c7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00120ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a40 	.word	0x08004a40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004a40 	.word	0x08004a40

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fa46 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f81a 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f8d6 	bl	8000688 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004dc:	f000 f874 	bl	80005c8 <MX_SPI1_Init>
  MX_UART4_Init();
 80004e0:	f000 f8a8 	bl	8000634 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e4:	f001 fd24 	bl	8001f30 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e8:	4a05      	ldr	r2, [pc, #20]	; (8000500 <main+0x34>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <main+0x38>)
 80004ee:	f001 fd69 	bl	8001fc4 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a04      	ldr	r2, [pc, #16]	; (8000508 <main+0x3c>)
 80004f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004f8:	f001 fd3e 	bl	8001f78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fc:	e7fe      	b.n	80004fc <main+0x30>
 80004fe:	bf00      	nop
 8000500:	08004ab0 	.word	0x08004ab0
 8000504:	0800070d 	.word	0x0800070d
 8000508:	200000cc 	.word	0x200000cc

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 fa56 	bl	80049cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b22      	ldr	r3, [pc, #136]	; (80005c0 <SystemClock_Config+0xb4>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <SystemClock_Config+0xb4>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b1f      	ldr	r3, [pc, #124]	; (80005c0 <SystemClock_Config+0xb4>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <SystemClock_Config+0xb8>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a1b      	ldr	r2, [pc, #108]	; (80005c4 <SystemClock_Config+0xb8>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b19      	ldr	r3, [pc, #100]	; (80005c4 <SystemClock_Config+0xb8>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000568:	2302      	movs	r3, #2
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000570:	2310      	movs	r3, #16
 8000572:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000574:	2300      	movs	r3, #0
 8000576:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	f107 0320 	add.w	r3, r7, #32
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fcfd 	bl	8000f7c <HAL_RCC_OscConfig>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000588:	f000 f8c8 	bl	800071c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058c:	230f      	movs	r3, #15
 800058e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 ff60 	bl	800146c <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005b2:	f000 f8b3 	bl	800071c <Error_Handler>
  }
}
 80005b6:	bf00      	nop
 80005b8:	3750      	adds	r7, #80	; 0x50
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800
 80005c4:	40007000 	.word	0x40007000

080005c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_SPI1_Init+0x64>)
 80005ce:	4a18      	ldr	r2, [pc, #96]	; (8000630 <MX_SPI1_Init+0x68>)
 80005d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_SPI1_Init+0x64>)
 80005d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_SPI1_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_SPI1_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_SPI1_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_SPI1_Init+0x64>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_SPI1_Init+0x64>)
 80005f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_SPI1_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_SPI1_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_SPI1_Init+0x64>)
 8000608:	2200      	movs	r2, #0
 800060a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_SPI1_Init+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_SPI1_Init+0x64>)
 8000614:	220a      	movs	r2, #10
 8000616:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_SPI1_Init+0x64>)
 800061a:	f001 f907 	bl	800182c <HAL_SPI_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000624:	f000 f87a 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000002c 	.word	0x2000002c
 8000630:	40013000 	.word	0x40013000

08000634 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_UART4_Init+0x4c>)
 800063a:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_UART4_Init+0x50>)
 800063c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800063e:	4b10      	ldr	r3, [pc, #64]	; (8000680 <MX_UART4_Init+0x4c>)
 8000640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000644:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <MX_UART4_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <MX_UART4_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <MX_UART4_Init+0x4c>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <MX_UART4_Init+0x4c>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <MX_UART4_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <MX_UART4_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800066a:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_UART4_Init+0x4c>)
 800066c:	f001 f967 	bl	800193e <HAL_UART_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000676:	f000 f851 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000084 	.word	0x20000084
 8000684:	40004c00 	.word	0x40004c00

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b088      	sub	sp, #32
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 030c 	add.w	r3, r7, #12
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_GPIO_Init+0x7c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a17      	ldr	r2, [pc, #92]	; (8000704 <MX_GPIO_Init+0x7c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_GPIO_Init+0x7c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_GPIO_Init+0x7c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a10      	ldr	r2, [pc, #64]	; (8000704 <MX_GPIO_Init+0x7c>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_GPIO_Init+0x7c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2104      	movs	r1, #4
 80006da:	480b      	ldr	r0, [pc, #44]	; (8000708 <MX_GPIO_Init+0x80>)
 80006dc:	f000 fc34 	bl	8000f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006e0:	2304      	movs	r3, #4
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4619      	mov	r1, r3
 80006f6:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_GPIO_Init+0x80>)
 80006f8:	f000 fa8a 	bl	8000c10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40020400 	.word	0x40020400

0800070c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f001 fce7 	bl	80020e8 <osDelay>
 800071a:	e7fb      	b.n	8000714 <StartDefaultTask+0x8>

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>
	...

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <HAL_MspInit+0x54>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <HAL_MspInit+0x54>)
 8000738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073c:	6453      	str	r3, [r2, #68]	; 0x44
 800073e:	4b0f      	ldr	r3, [pc, #60]	; (800077c <HAL_MspInit+0x54>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <HAL_MspInit+0x54>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	4a0a      	ldr	r2, [pc, #40]	; (800077c <HAL_MspInit+0x54>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	; 0x40
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_MspInit+0x54>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	210f      	movs	r1, #15
 800076a:	f06f 0001 	mvn.w	r0, #1
 800076e:	f000 fa26 	bl	8000bbe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a19      	ldr	r2, [pc, #100]	; (8000804 <HAL_SPI_MspInit+0x84>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d12b      	bne.n	80007fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <HAL_SPI_MspInit+0x88>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <HAL_SPI_MspInit+0x88>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007b0:	6453      	str	r3, [r2, #68]	; 0x44
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_SPI_MspInit+0x88>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <HAL_SPI_MspInit+0x88>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <HAL_SPI_MspInit+0x88>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <HAL_SPI_MspInit+0x88>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80007da:	2338      	movs	r3, #56	; 0x38
 80007dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007de:	2302      	movs	r3, #2
 80007e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ea:	2305      	movs	r3, #5
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <HAL_SPI_MspInit+0x8c>)
 80007f6:	f000 fa0b 	bl	8000c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40013000 	.word	0x40013000
 8000808:	40023800 	.word	0x40023800
 800080c:	40020400 	.word	0x40020400

08000810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	; 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a19      	ldr	r2, [pc, #100]	; (8000894 <HAL_UART_MspInit+0x84>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d12b      	bne.n	800088a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <HAL_UART_MspInit+0x88>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083a:	4a17      	ldr	r2, [pc, #92]	; (8000898 <HAL_UART_MspInit+0x88>)
 800083c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000840:	6413      	str	r3, [r2, #64]	; 0x40
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_UART_MspInit+0x88>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <HAL_UART_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a10      	ldr	r2, [pc, #64]	; (8000898 <HAL_UART_MspInit+0x88>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <HAL_UART_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800086a:	2303      	movs	r3, #3
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800086e:	2302      	movs	r3, #2
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800087a:	2308      	movs	r3, #8
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <HAL_UART_MspInit+0x8c>)
 8000886:	f000 f9c3 	bl	8000c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40004c00 	.word	0x40004c00
 8000898:	40023800 	.word	0x40023800
 800089c:	40020000 	.word	0x40020000

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <MemManage_Handler+0x4>

080008b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b2:	b480      	push	{r7}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler+0x4>

080008be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 f898 	bl	8000a04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008d4:	f003 f816 	bl	8003904 <xTaskGetSchedulerState>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d001      	beq.n	80008e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008de:	f003 fdfb 	bl	80044d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <SystemInit+0x20>)
 80008ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <SystemInit+0x20>)
 80008f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800090c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000944 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000910:	f7ff ffea 	bl	80008e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000916:	490d      	ldr	r1, [pc, #52]	; (800094c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0a      	ldr	r2, [pc, #40]	; (8000954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800092c:	4c0a      	ldr	r4, [pc, #40]	; (8000958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800093a:	f004 f84f 	bl	80049dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093e:	f7ff fdc5 	bl	80004cc <main>
  bx  lr    
 8000942:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000950:	08004afc 	.word	0x08004afc
  ldr r2, =_sbss
 8000954:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000958:	20004a24 	.word	0x20004a24

0800095c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC_IRQHandler>
	...

08000960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <HAL_Init+0x40>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <HAL_Init+0x40>)
 800096a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800096e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <HAL_Init+0x40>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <HAL_Init+0x40>)
 8000976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800097a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800097c:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_Init+0x40>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <HAL_Init+0x40>)
 8000982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000988:	2003      	movs	r0, #3
 800098a:	f000 f90d 	bl	8000ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098e:	200f      	movs	r0, #15
 8000990:	f000 f808 	bl	80009a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000994:	f7ff fec8 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40023c00 	.word	0x40023c00

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_InitTick+0x54>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_InitTick+0x58>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	4619      	mov	r1, r3
 80009b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80009be:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f917 	bl	8000bf6 <HAL_SYSTICK_Config>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e00e      	b.n	80009f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d80a      	bhi.n	80009ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d8:	2200      	movs	r2, #0
 80009da:	6879      	ldr	r1, [r7, #4]
 80009dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009e0:	f000 f8ed 	bl	8000bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <HAL_InitTick+0x5c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000000 	.word	0x20000000
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000004 	.word	0x20000004

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008
 8000a28:	200000d0 	.word	0x200000d0

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200000d0 	.word	0x200000d0

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	; (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b74:	d301      	bcc.n	8000b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00f      	b.n	8000b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <SysTick_Config+0x40>)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b82:	210f      	movs	r1, #15
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b88:	f7ff ff8e 	bl	8000aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <SysTick_Config+0x40>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b92:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <SysTick_Config+0x40>)
 8000b94:	2207      	movs	r2, #7
 8000b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	e000e010 	.word	0xe000e010

08000ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb0:	6878      	ldr	r0, [r7, #4]
 8000bb2:	f7ff ff47 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b086      	sub	sp, #24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	60b9      	str	r1, [r7, #8]
 8000bc8:	607a      	str	r2, [r7, #4]
 8000bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd0:	f7ff ff5c 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000bd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	6978      	ldr	r0, [r7, #20]
 8000bdc:	f7ff ff8e 	bl	8000afc <NVIC_EncodePriority>
 8000be0:	4602      	mov	r2, r0
 8000be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be6:	4611      	mov	r1, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff5d 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffb0 	bl	8000b64 <SysTick_Config>
 8000c04:	4603      	mov	r3, r0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
 8000c2a:	e16b      	b.n	8000f04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	697a      	ldr	r2, [r7, #20]
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	f040 815a 	bne.w	8000efe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f003 0303 	and.w	r3, r3, #3
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d005      	beq.n	8000c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d130      	bne.n	8000cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2203      	movs	r2, #3
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4013      	ands	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	68da      	ldr	r2, [r3, #12]
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c98:	2201      	movs	r2, #1
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	091b      	lsrs	r3, r3, #4
 8000cae:	f003 0201 	and.w	r2, r3, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d017      	beq.n	8000d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	689a      	ldr	r2, [r3, #8]
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f003 0303 	and.w	r3, r3, #3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d123      	bne.n	8000d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	08da      	lsrs	r2, r3, #3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3208      	adds	r2, #8
 8000d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	f003 0307 	and.w	r3, r3, #7
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	220f      	movs	r2, #15
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	691a      	ldr	r2, [r3, #16]
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	08da      	lsrs	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3208      	adds	r2, #8
 8000d4e:	69b9      	ldr	r1, [r7, #24]
 8000d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	69ba      	ldr	r2, [r7, #24]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0203 	and.w	r2, r3, #3
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 80b4 	beq.w	8000efe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b60      	ldr	r3, [pc, #384]	; (8000f1c <HAL_GPIO_Init+0x30c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	4a5f      	ldr	r2, [pc, #380]	; (8000f1c <HAL_GPIO_Init+0x30c>)
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	6453      	str	r3, [r2, #68]	; 0x44
 8000da6:	4b5d      	ldr	r3, [pc, #372]	; (8000f1c <HAL_GPIO_Init+0x30c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db2:	4a5b      	ldr	r2, [pc, #364]	; (8000f20 <HAL_GPIO_Init+0x310>)
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	089b      	lsrs	r3, r3, #2
 8000db8:	3302      	adds	r3, #2
 8000dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	220f      	movs	r2, #15
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a52      	ldr	r2, [pc, #328]	; (8000f24 <HAL_GPIO_Init+0x314>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d02b      	beq.n	8000e36 <HAL_GPIO_Init+0x226>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a51      	ldr	r2, [pc, #324]	; (8000f28 <HAL_GPIO_Init+0x318>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d025      	beq.n	8000e32 <HAL_GPIO_Init+0x222>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a50      	ldr	r2, [pc, #320]	; (8000f2c <HAL_GPIO_Init+0x31c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d01f      	beq.n	8000e2e <HAL_GPIO_Init+0x21e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4f      	ldr	r2, [pc, #316]	; (8000f30 <HAL_GPIO_Init+0x320>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d019      	beq.n	8000e2a <HAL_GPIO_Init+0x21a>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4e      	ldr	r2, [pc, #312]	; (8000f34 <HAL_GPIO_Init+0x324>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d013      	beq.n	8000e26 <HAL_GPIO_Init+0x216>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4d      	ldr	r2, [pc, #308]	; (8000f38 <HAL_GPIO_Init+0x328>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d00d      	beq.n	8000e22 <HAL_GPIO_Init+0x212>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4c      	ldr	r2, [pc, #304]	; (8000f3c <HAL_GPIO_Init+0x32c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d007      	beq.n	8000e1e <HAL_GPIO_Init+0x20e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4b      	ldr	r2, [pc, #300]	; (8000f40 <HAL_GPIO_Init+0x330>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d101      	bne.n	8000e1a <HAL_GPIO_Init+0x20a>
 8000e16:	2307      	movs	r3, #7
 8000e18:	e00e      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	e00c      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e1e:	2306      	movs	r3, #6
 8000e20:	e00a      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e22:	2305      	movs	r3, #5
 8000e24:	e008      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e26:	2304      	movs	r3, #4
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e004      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e002      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x228>
 8000e36:	2300      	movs	r3, #0
 8000e38:	69fa      	ldr	r2, [r7, #28]
 8000e3a:	f002 0203 	and.w	r2, r2, #3
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	4093      	lsls	r3, r2
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e48:	4935      	ldr	r1, [pc, #212]	; (8000f20 <HAL_GPIO_Init+0x310>)
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e56:	4b3b      	ldr	r3, [pc, #236]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7a:	4a32      	ldr	r2, [pc, #200]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e80:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea4:	4a27      	ldr	r2, [pc, #156]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ece:	4a1d      	ldr	r2, [pc, #116]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef8:	4a12      	ldr	r2, [pc, #72]	; (8000f44 <HAL_GPIO_Init+0x334>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3301      	adds	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	f67f ae90 	bls.w	8000c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40013800 	.word	0x40013800
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	40020c00 	.word	0x40020c00
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40021400 	.word	0x40021400
 8000f3c:	40021800 	.word	0x40021800
 8000f40:	40021c00 	.word	0x40021c00
 8000f44:	40013c00 	.word	0x40013c00

08000f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
 8000f54:	4613      	mov	r3, r2
 8000f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f58:	787b      	ldrb	r3, [r7, #1]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f64:	e003      	b.n	8000f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	041a      	lsls	r2, r3, #16
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	619a      	str	r2, [r3, #24]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e267      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d075      	beq.n	8001086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f9a:	4b88      	ldr	r3, [pc, #544]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d00c      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fa6:	4b85      	ldr	r3, [pc, #532]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	d112      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fb2:	4b82      	ldr	r3, [pc, #520]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fbe:	d10b      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	4b7e      	ldr	r3, [pc, #504]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d05b      	beq.n	8001084 <HAL_RCC_OscConfig+0x108>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d157      	bne.n	8001084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e242      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe0:	d106      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x74>
 8000fe2:	4b76      	ldr	r3, [pc, #472]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a75      	ldr	r2, [pc, #468]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e01d      	b.n	800102c <HAL_RCC_OscConfig+0xb0>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0x98>
 8000ffa:	4b70      	ldr	r3, [pc, #448]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a6f      	ldr	r2, [pc, #444]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b6d      	ldr	r3, [pc, #436]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a6c      	ldr	r2, [pc, #432]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e00b      	b.n	800102c <HAL_RCC_OscConfig+0xb0>
 8001014:	4b69      	ldr	r3, [pc, #420]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a68      	ldr	r2, [pc, #416]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 800101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b66      	ldr	r3, [pc, #408]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a65      	ldr	r2, [pc, #404]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fcfa 	bl	8000a2c <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fcf6 	bl	8000a2c <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e207      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0xc0>
 800105a:	e014      	b.n	8001086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fce6 	bl	8000a2c <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001064:	f7ff fce2 	bl	8000a2c <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b64      	cmp	r3, #100	; 0x64
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e1f3      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	4b51      	ldr	r3, [pc, #324]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0xe8>
 8001082:	e000      	b.n	8001086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d063      	beq.n	800115a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001092:	4b4a      	ldr	r3, [pc, #296]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00b      	beq.n	80010b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800109e:	4b47      	ldr	r3, [pc, #284]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d11c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010aa:	4b44      	ldr	r3, [pc, #272]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d116      	bne.n	80010e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	4b41      	ldr	r3, [pc, #260]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <HAL_RCC_OscConfig+0x152>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d001      	beq.n	80010ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e1c7      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4937      	ldr	r1, [pc, #220]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e2:	e03a      	b.n	800115a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d020      	beq.n	800112e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ec:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <HAL_RCC_OscConfig+0x244>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f2:	f7ff fc9b 	bl	8000a2c <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010fa:	f7ff fc97 	bl	8000a2c <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e1a8      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4925      	ldr	r1, [pc, #148]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
 800112c:	e015      	b.n	800115a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_RCC_OscConfig+0x244>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001134:	f7ff fc7a 	bl	8000a2c <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113c:	f7ff fc76 	bl	8000a2c <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e187      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d036      	beq.n	80011d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d016      	beq.n	800119c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_RCC_OscConfig+0x248>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001174:	f7ff fc5a 	bl	8000a2c <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fc56 	bl	8000a2c <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e167      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x200>
 800119a:	e01b      	b.n	80011d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_RCC_OscConfig+0x248>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a2:	f7ff fc43 	bl	8000a2c <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a8:	e00e      	b.n	80011c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011aa:	f7ff fc3f 	bl	8000a2c <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d907      	bls.n	80011c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e150      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
 80011bc:	40023800 	.word	0x40023800
 80011c0:	42470000 	.word	0x42470000
 80011c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c8:	4b88      	ldr	r3, [pc, #544]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80011ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1ea      	bne.n	80011aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 8097 	beq.w	8001310 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e6:	4b81      	ldr	r3, [pc, #516]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10f      	bne.n	8001212 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	4b7d      	ldr	r3, [pc, #500]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a7c      	ldr	r2, [pc, #496]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b7a      	ldr	r3, [pc, #488]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800120e:	2301      	movs	r3, #1
 8001210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001212:	4b77      	ldr	r3, [pc, #476]	; (80013f0 <HAL_RCC_OscConfig+0x474>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121a:	2b00      	cmp	r3, #0
 800121c:	d118      	bne.n	8001250 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800121e:	4b74      	ldr	r3, [pc, #464]	; (80013f0 <HAL_RCC_OscConfig+0x474>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a73      	ldr	r2, [pc, #460]	; (80013f0 <HAL_RCC_OscConfig+0x474>)
 8001224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122a:	f7ff fbff 	bl	8000a2c <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001232:	f7ff fbfb 	bl	8000a2c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e10c      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	4b6a      	ldr	r3, [pc, #424]	; (80013f0 <HAL_RCC_OscConfig+0x474>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x2ea>
 8001258:	4b64      	ldr	r3, [pc, #400]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800125a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125c:	4a63      	ldr	r2, [pc, #396]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6713      	str	r3, [r2, #112]	; 0x70
 8001264:	e01c      	b.n	80012a0 <HAL_RCC_OscConfig+0x324>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b05      	cmp	r3, #5
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x30c>
 800126e:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001272:	4a5e      	ldr	r2, [pc, #376]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6713      	str	r3, [r2, #112]	; 0x70
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800127c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127e:	4a5b      	ldr	r2, [pc, #364]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6713      	str	r3, [r2, #112]	; 0x70
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0x324>
 8001288:	4b58      	ldr	r3, [pc, #352]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800128a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128c:	4a57      	ldr	r2, [pc, #348]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	6713      	str	r3, [r2, #112]	; 0x70
 8001294:	4b55      	ldr	r3, [pc, #340]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001298:	4a54      	ldr	r2, [pc, #336]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800129a:	f023 0304 	bic.w	r3, r3, #4
 800129e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d015      	beq.n	80012d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a8:	f7ff fbc0 	bl	8000a2c <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ae:	e00a      	b.n	80012c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b0:	f7ff fbbc 	bl	8000a2c <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80012be:	4293      	cmp	r3, r2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e0cb      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c6:	4b49      	ldr	r3, [pc, #292]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80012c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0ee      	beq.n	80012b0 <HAL_RCC_OscConfig+0x334>
 80012d2:	e014      	b.n	80012fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d4:	f7ff fbaa 	bl	8000a2c <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012da:	e00a      	b.n	80012f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012dc:	f7ff fba6 	bl	8000a2c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e0b5      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f2:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80012f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1ee      	bne.n	80012dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d105      	bne.n	8001310 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001304:	4b39      	ldr	r3, [pc, #228]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	4a38      	ldr	r2, [pc, #224]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800130a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800130e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80a1 	beq.w	800145c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800131a:	4b34      	ldr	r3, [pc, #208]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b08      	cmp	r3, #8
 8001324:	d05c      	beq.n	80013e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d141      	bne.n	80013b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_RCC_OscConfig+0x478>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fb7a 	bl	8000a2c <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133c:	f7ff fb76 	bl	8000a2c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e087      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134e:	4b27      	ldr	r3, [pc, #156]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69da      	ldr	r2, [r3, #28]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	019b      	lsls	r3, r3, #6
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	085b      	lsrs	r3, r3, #1
 8001372:	3b01      	subs	r3, #1
 8001374:	041b      	lsls	r3, r3, #16
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	061b      	lsls	r3, r3, #24
 800137e:	491b      	ldr	r1, [pc, #108]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_RCC_OscConfig+0x478>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fb4f 	bl	8000a2c <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001392:	f7ff fb4b 	bl	8000a2c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e05c      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x416>
 80013b0:	e054      	b.n	800145c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_RCC_OscConfig+0x478>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fb38 	bl	8000a2c <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c0:	f7ff fb34 	bl	8000a2c <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e045      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x444>
 80013de:	e03d      	b.n	800145c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d107      	bne.n	80013f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e038      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40007000 	.word	0x40007000
 80013f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_RCC_OscConfig+0x4ec>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d028      	beq.n	8001458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001410:	429a      	cmp	r2, r3
 8001412:	d121      	bne.n	8001458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141e:	429a      	cmp	r2, r3
 8001420:	d11a      	bne.n	8001458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001428:	4013      	ands	r3, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800142e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001430:	4293      	cmp	r3, r2
 8001432:	d111      	bne.n	8001458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	085b      	lsrs	r3, r3, #1
 8001440:	3b01      	subs	r3, #1
 8001442:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001444:	429a      	cmp	r2, r3
 8001446:	d107      	bne.n	8001458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001452:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800

0800146c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0cc      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001480:	4b68      	ldr	r3, [pc, #416]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d90c      	bls.n	80014a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148e:	4b65      	ldr	r3, [pc, #404]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001496:	4b63      	ldr	r3, [pc, #396]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0b8      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d020      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	4a58      	ldr	r2, [pc, #352]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d8:	4b53      	ldr	r3, [pc, #332]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4a52      	ldr	r2, [pc, #328]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e4:	4b50      	ldr	r3, [pc, #320]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	494d      	ldr	r1, [pc, #308]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d044      	beq.n	800158c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d119      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e07f      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d003      	beq.n	800152a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001526:	2b03      	cmp	r3, #3
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152a:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e06f      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153a:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e067      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f023 0203 	bic.w	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4934      	ldr	r1, [pc, #208]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	4313      	orrs	r3, r2
 800155a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800155c:	f7ff fa66 	bl	8000a2c <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	e00a      	b.n	800157a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001564:	f7ff fa62 	bl	8000a2c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e04f      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157a:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 020c 	and.w	r2, r3, #12
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	429a      	cmp	r2, r3
 800158a:	d1eb      	bne.n	8001564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800158c:	4b25      	ldr	r3, [pc, #148]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d20c      	bcs.n	80015b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e032      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4916      	ldr	r1, [pc, #88]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d009      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	490e      	ldr	r1, [pc, #56]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015f2:	f000 f821 	bl	8001638 <HAL_RCC_GetSysClockFreq>
 80015f6:	4602      	mov	r2, r0
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	490a      	ldr	r1, [pc, #40]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	5ccb      	ldrb	r3, [r1, r3]
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_ClockConfig+0x1c8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff f9c6 	bl	80009a4 <HAL_InitTick>

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023c00 	.word	0x40023c00
 8001628:	40023800 	.word	0x40023800
 800162c:	08004ad4 	.word	0x08004ad4
 8001630:	20000000 	.word	0x20000000
 8001634:	20000004 	.word	0x20000004

08001638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800163c:	b090      	sub	sp, #64	; 0x40
 800163e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	637b      	str	r3, [r7, #52]	; 0x34
 8001644:	2300      	movs	r3, #0
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001648:	2300      	movs	r3, #0
 800164a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001650:	4b59      	ldr	r3, [pc, #356]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d00d      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x40>
 800165c:	2b08      	cmp	r3, #8
 800165e:	f200 80a1 	bhi.w	80017a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x34>
 8001666:	2b04      	cmp	r3, #4
 8001668:	d003      	beq.n	8001672 <HAL_RCC_GetSysClockFreq+0x3a>
 800166a:	e09b      	b.n	80017a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800166c:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_RCC_GetSysClockFreq+0x184>)
 800166e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001670:	e09b      	b.n	80017aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001672:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001674:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001676:	e098      	b.n	80017aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001678:	4b4f      	ldr	r3, [pc, #316]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001680:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001682:	4b4d      	ldr	r3, [pc, #308]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d028      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800168e:	4b4a      	ldr	r3, [pc, #296]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	099b      	lsrs	r3, r3, #6
 8001694:	2200      	movs	r2, #0
 8001696:	623b      	str	r3, [r7, #32]
 8001698:	627a      	str	r2, [r7, #36]	; 0x24
 800169a:	6a3b      	ldr	r3, [r7, #32]
 800169c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016a0:	2100      	movs	r1, #0
 80016a2:	4b47      	ldr	r3, [pc, #284]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016a4:	fb03 f201 	mul.w	r2, r3, r1
 80016a8:	2300      	movs	r3, #0
 80016aa:	fb00 f303 	mul.w	r3, r0, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	4a43      	ldr	r2, [pc, #268]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80016b2:	fba0 1202 	umull	r1, r2, r0, r2
 80016b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016b8:	460a      	mov	r2, r1
 80016ba:	62ba      	str	r2, [r7, #40]	; 0x28
 80016bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016be:	4413      	add	r3, r2
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c4:	2200      	movs	r2, #0
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	61fa      	str	r2, [r7, #28]
 80016ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016d2:	f7fe fd7d 	bl	80001d0 <__aeabi_uldivmod>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4613      	mov	r3, r2
 80016dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016de:	e053      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e0:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	2200      	movs	r2, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	617a      	str	r2, [r7, #20]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016f2:	f04f 0b00 	mov.w	fp, #0
 80016f6:	4652      	mov	r2, sl
 80016f8:	465b      	mov	r3, fp
 80016fa:	f04f 0000 	mov.w	r0, #0
 80016fe:	f04f 0100 	mov.w	r1, #0
 8001702:	0159      	lsls	r1, r3, #5
 8001704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001708:	0150      	lsls	r0, r2, #5
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	ebb2 080a 	subs.w	r8, r2, sl
 8001712:	eb63 090b 	sbc.w	r9, r3, fp
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001722:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001726:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800172a:	ebb2 0408 	subs.w	r4, r2, r8
 800172e:	eb63 0509 	sbc.w	r5, r3, r9
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	00eb      	lsls	r3, r5, #3
 800173c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001740:	00e2      	lsls	r2, r4, #3
 8001742:	4614      	mov	r4, r2
 8001744:	461d      	mov	r5, r3
 8001746:	eb14 030a 	adds.w	r3, r4, sl
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	eb45 030b 	adc.w	r3, r5, fp
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800175e:	4629      	mov	r1, r5
 8001760:	028b      	lsls	r3, r1, #10
 8001762:	4621      	mov	r1, r4
 8001764:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001768:	4621      	mov	r1, r4
 800176a:	028a      	lsls	r2, r1, #10
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001772:	2200      	movs	r2, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	60fa      	str	r2, [r7, #12]
 8001778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800177c:	f7fe fd28 	bl	80001d0 <__aeabi_uldivmod>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4613      	mov	r3, r2
 8001786:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001788:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	0c1b      	lsrs	r3, r3, #16
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	3301      	adds	r3, #1
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800179a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179c:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017a2:	e002      	b.n	80017aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_RCC_GetSysClockFreq+0x184>)
 80017a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3740      	adds	r7, #64	; 0x40
 80017b0:	46bd      	mov	sp, r7
 80017b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	00f42400 	.word	0x00f42400
 80017c0:	017d7840 	.word	0x017d7840

080017c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80017ca:	681b      	ldr	r3, [r3, #0]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000000 	.word	0x20000000

080017dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017e0:	f7ff fff0 	bl	80017c4 <HAL_RCC_GetHCLKFreq>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	0a9b      	lsrs	r3, r3, #10
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	4903      	ldr	r1, [pc, #12]	; (8001800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017f2:	5ccb      	ldrb	r3, [r1, r3]
 80017f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	08004ae4 	.word	0x08004ae4

08001804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001808:	f7ff ffdc 	bl	80017c4 <HAL_RCC_GetHCLKFreq>
 800180c:	4602      	mov	r2, r0
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	0b5b      	lsrs	r3, r3, #13
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	4903      	ldr	r1, [pc, #12]	; (8001828 <HAL_RCC_GetPCLK2Freq+0x24>)
 800181a:	5ccb      	ldrb	r3, [r1, r3]
 800181c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001820:	4618      	mov	r0, r3
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40023800 	.word	0x40023800
 8001828:	08004ae4 	.word	0x08004ae4

0800182c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e07b      	b.n	8001936 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	2b00      	cmp	r3, #0
 8001844:	d108      	bne.n	8001858 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800184e:	d009      	beq.n	8001864 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	61da      	str	r2, [r3, #28]
 8001856:	e005      	b.n	8001864 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7fe ff7e 	bl	8000780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800189a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	431a      	orrs	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e8:	ea42 0103 	orr.w	r1, r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	430a      	orrs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	f003 0104 	and.w	r1, r3, #4
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190a:	f003 0210 	and.w	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	69da      	ldr	r2, [r3, #28]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001924:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e042      	b.n	80019d6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b00      	cmp	r3, #0
 800195a:	d106      	bne.n	800196a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f7fe ff53 	bl	8000810 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2224      	movs	r2, #36	; 0x24
 800196e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001980:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 f82c 	bl	80019e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	691a      	ldr	r2, [r3, #16]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001996:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019a6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80019b6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2220      	movs	r2, #32
 80019ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019e4:	b0c0      	sub	sp, #256	; 0x100
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80019f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80019fc:	68d9      	ldr	r1, [r3, #12]
 80019fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	ea40 0301 	orr.w	r3, r0, r1
 8001a08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001a38:	f021 010c 	bic.w	r1, r1, #12
 8001a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a46:	430b      	orrs	r3, r1
 8001a48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a5a:	6999      	ldr	r1, [r3, #24]
 8001a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	ea40 0301 	orr.w	r3, r0, r1
 8001a66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b8f      	ldr	r3, [pc, #572]	; (8001cac <UART_SetConfig+0x2cc>)
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d005      	beq.n	8001a80 <UART_SetConfig+0xa0>
 8001a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4b8d      	ldr	r3, [pc, #564]	; (8001cb0 <UART_SetConfig+0x2d0>)
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d104      	bne.n	8001a8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001a80:	f7ff fec0 	bl	8001804 <HAL_RCC_GetPCLK2Freq>
 8001a84:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001a88:	e003      	b.n	8001a92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001a8a:	f7ff fea7 	bl	80017dc <HAL_RCC_GetPCLK1Freq>
 8001a8e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a9c:	f040 810c 	bne.w	8001cb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001aaa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001aae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ab2:	4622      	mov	r2, r4
 8001ab4:	462b      	mov	r3, r5
 8001ab6:	1891      	adds	r1, r2, r2
 8001ab8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001aba:	415b      	adcs	r3, r3
 8001abc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001abe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	eb12 0801 	adds.w	r8, r2, r1
 8001ac8:	4629      	mov	r1, r5
 8001aca:	eb43 0901 	adc.w	r9, r3, r1
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ae2:	4690      	mov	r8, r2
 8001ae4:	4699      	mov	r9, r3
 8001ae6:	4623      	mov	r3, r4
 8001ae8:	eb18 0303 	adds.w	r3, r8, r3
 8001aec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001af0:	462b      	mov	r3, r5
 8001af2:	eb49 0303 	adc.w	r3, r9, r3
 8001af6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b06:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001b0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001b0e:	460b      	mov	r3, r1
 8001b10:	18db      	adds	r3, r3, r3
 8001b12:	653b      	str	r3, [r7, #80]	; 0x50
 8001b14:	4613      	mov	r3, r2
 8001b16:	eb42 0303 	adc.w	r3, r2, r3
 8001b1a:	657b      	str	r3, [r7, #84]	; 0x54
 8001b1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001b24:	f7fe fb54 	bl	80001d0 <__aeabi_uldivmod>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <UART_SetConfig+0x2d4>)
 8001b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	011c      	lsls	r4, r3, #4
 8001b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b40:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001b44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001b48:	4642      	mov	r2, r8
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	1891      	adds	r1, r2, r2
 8001b4e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001b50:	415b      	adcs	r3, r3
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001b58:	4641      	mov	r1, r8
 8001b5a:	eb12 0a01 	adds.w	sl, r2, r1
 8001b5e:	4649      	mov	r1, r9
 8001b60:	eb43 0b01 	adc.w	fp, r3, r1
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b78:	4692      	mov	sl, r2
 8001b7a:	469b      	mov	fp, r3
 8001b7c:	4643      	mov	r3, r8
 8001b7e:	eb1a 0303 	adds.w	r3, sl, r3
 8001b82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b86:	464b      	mov	r3, r9
 8001b88:	eb4b 0303 	adc.w	r3, fp, r3
 8001b8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b9c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001ba0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	18db      	adds	r3, r3, r3
 8001ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8001baa:	4613      	mov	r3, r2
 8001bac:	eb42 0303 	adc.w	r3, r2, r3
 8001bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8001bb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001bb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001bba:	f7fe fb09 	bl	80001d0 <__aeabi_uldivmod>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <UART_SetConfig+0x2d4>)
 8001bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2264      	movs	r2, #100	; 0x64
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	1acb      	subs	r3, r1, r3
 8001bd4:	00db      	lsls	r3, r3, #3
 8001bd6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001bda:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <UART_SetConfig+0x2d4>)
 8001bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8001be0:	095b      	lsrs	r3, r3, #5
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001be8:	441c      	add	r4, r3
 8001bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001bf4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001bf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001bfc:	4642      	mov	r2, r8
 8001bfe:	464b      	mov	r3, r9
 8001c00:	1891      	adds	r1, r2, r2
 8001c02:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c04:	415b      	adcs	r3, r3
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c0c:	4641      	mov	r1, r8
 8001c0e:	1851      	adds	r1, r2, r1
 8001c10:	6339      	str	r1, [r7, #48]	; 0x30
 8001c12:	4649      	mov	r1, r9
 8001c14:	414b      	adcs	r3, r1
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001c24:	4659      	mov	r1, fp
 8001c26:	00cb      	lsls	r3, r1, #3
 8001c28:	4651      	mov	r1, sl
 8001c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c2e:	4651      	mov	r1, sl
 8001c30:	00ca      	lsls	r2, r1, #3
 8001c32:	4610      	mov	r0, r2
 8001c34:	4619      	mov	r1, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	4642      	mov	r2, r8
 8001c3a:	189b      	adds	r3, r3, r2
 8001c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c40:	464b      	mov	r3, r9
 8001c42:	460a      	mov	r2, r1
 8001c44:	eb42 0303 	adc.w	r3, r2, r3
 8001c48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001c5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001c60:	460b      	mov	r3, r1
 8001c62:	18db      	adds	r3, r3, r3
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c66:	4613      	mov	r3, r2
 8001c68:	eb42 0303 	adc.w	r3, r2, r3
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001c76:	f7fe faab 	bl	80001d0 <__aeabi_uldivmod>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <UART_SetConfig+0x2d4>)
 8001c80:	fba3 1302 	umull	r1, r3, r3, r2
 8001c84:	095b      	lsrs	r3, r3, #5
 8001c86:	2164      	movs	r1, #100	; 0x64
 8001c88:	fb01 f303 	mul.w	r3, r1, r3
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	3332      	adds	r3, #50	; 0x32
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <UART_SetConfig+0x2d4>)
 8001c94:	fba2 2303 	umull	r2, r3, r2, r3
 8001c98:	095b      	lsrs	r3, r3, #5
 8001c9a:	f003 0207 	and.w	r2, r3, #7
 8001c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4422      	add	r2, r4
 8001ca6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ca8:	e106      	b.n	8001eb8 <UART_SetConfig+0x4d8>
 8001caa:	bf00      	nop
 8001cac:	40011000 	.word	0x40011000
 8001cb0:	40011400 	.word	0x40011400
 8001cb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001cc2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001cc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001cca:	4642      	mov	r2, r8
 8001ccc:	464b      	mov	r3, r9
 8001cce:	1891      	adds	r1, r2, r2
 8001cd0:	6239      	str	r1, [r7, #32]
 8001cd2:	415b      	adcs	r3, r3
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cda:	4641      	mov	r1, r8
 8001cdc:	1854      	adds	r4, r2, r1
 8001cde:	4649      	mov	r1, r9
 8001ce0:	eb43 0501 	adc.w	r5, r3, r1
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	00eb      	lsls	r3, r5, #3
 8001cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cf2:	00e2      	lsls	r2, r4, #3
 8001cf4:	4614      	mov	r4, r2
 8001cf6:	461d      	mov	r5, r3
 8001cf8:	4643      	mov	r3, r8
 8001cfa:	18e3      	adds	r3, r4, r3
 8001cfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d00:	464b      	mov	r3, r9
 8001d02:	eb45 0303 	adc.w	r3, r5, r3
 8001d06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d26:	4629      	mov	r1, r5
 8001d28:	008b      	lsls	r3, r1, #2
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d30:	4621      	mov	r1, r4
 8001d32:	008a      	lsls	r2, r1, #2
 8001d34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001d38:	f7fe fa4a 	bl	80001d0 <__aeabi_uldivmod>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4b60      	ldr	r3, [pc, #384]	; (8001ec4 <UART_SetConfig+0x4e4>)
 8001d42:	fba3 2302 	umull	r2, r3, r3, r2
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	011c      	lsls	r4, r3, #4
 8001d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001d54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001d58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001d5c:	4642      	mov	r2, r8
 8001d5e:	464b      	mov	r3, r9
 8001d60:	1891      	adds	r1, r2, r2
 8001d62:	61b9      	str	r1, [r7, #24]
 8001d64:	415b      	adcs	r3, r3
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d6c:	4641      	mov	r1, r8
 8001d6e:	1851      	adds	r1, r2, r1
 8001d70:	6139      	str	r1, [r7, #16]
 8001d72:	4649      	mov	r1, r9
 8001d74:	414b      	adcs	r3, r1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d84:	4659      	mov	r1, fp
 8001d86:	00cb      	lsls	r3, r1, #3
 8001d88:	4651      	mov	r1, sl
 8001d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d8e:	4651      	mov	r1, sl
 8001d90:	00ca      	lsls	r2, r1, #3
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	4642      	mov	r2, r8
 8001d9a:	189b      	adds	r3, r3, r2
 8001d9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001da0:	464b      	mov	r3, r9
 8001da2:	460a      	mov	r2, r1
 8001da4:	eb42 0303 	adc.w	r3, r2, r3
 8001da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001db6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001dc4:	4649      	mov	r1, r9
 8001dc6:	008b      	lsls	r3, r1, #2
 8001dc8:	4641      	mov	r1, r8
 8001dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001dce:	4641      	mov	r1, r8
 8001dd0:	008a      	lsls	r2, r1, #2
 8001dd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001dd6:	f7fe f9fb 	bl	80001d0 <__aeabi_uldivmod>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4611      	mov	r1, r2
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <UART_SetConfig+0x4e4>)
 8001de2:	fba3 2301 	umull	r2, r3, r3, r1
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2264      	movs	r2, #100	; 0x64
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	1acb      	subs	r3, r1, r3
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	3332      	adds	r3, #50	; 0x32
 8001df4:	4a33      	ldr	r2, [pc, #204]	; (8001ec4 <UART_SetConfig+0x4e4>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e00:	441c      	add	r4, r3
 8001e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e06:	2200      	movs	r2, #0
 8001e08:	673b      	str	r3, [r7, #112]	; 0x70
 8001e0a:	677a      	str	r2, [r7, #116]	; 0x74
 8001e0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001e10:	4642      	mov	r2, r8
 8001e12:	464b      	mov	r3, r9
 8001e14:	1891      	adds	r1, r2, r2
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	415b      	adcs	r3, r3
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e20:	4641      	mov	r1, r8
 8001e22:	1851      	adds	r1, r2, r1
 8001e24:	6039      	str	r1, [r7, #0]
 8001e26:	4649      	mov	r1, r9
 8001e28:	414b      	adcs	r3, r1
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e38:	4659      	mov	r1, fp
 8001e3a:	00cb      	lsls	r3, r1, #3
 8001e3c:	4651      	mov	r1, sl
 8001e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e42:	4651      	mov	r1, sl
 8001e44:	00ca      	lsls	r2, r1, #3
 8001e46:	4610      	mov	r0, r2
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4642      	mov	r2, r8
 8001e4e:	189b      	adds	r3, r3, r2
 8001e50:	66bb      	str	r3, [r7, #104]	; 0x68
 8001e52:	464b      	mov	r3, r9
 8001e54:	460a      	mov	r2, r1
 8001e56:	eb42 0303 	adc.w	r3, r2, r3
 8001e5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	663b      	str	r3, [r7, #96]	; 0x60
 8001e66:	667a      	str	r2, [r7, #100]	; 0x64
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001e74:	4649      	mov	r1, r9
 8001e76:	008b      	lsls	r3, r1, #2
 8001e78:	4641      	mov	r1, r8
 8001e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e7e:	4641      	mov	r1, r8
 8001e80:	008a      	lsls	r2, r1, #2
 8001e82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e86:	f7fe f9a3 	bl	80001d0 <__aeabi_uldivmod>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <UART_SetConfig+0x4e4>)
 8001e90:	fba3 1302 	umull	r1, r3, r3, r2
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	2164      	movs	r1, #100	; 0x64
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	3332      	adds	r3, #50	; 0x32
 8001ea2:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <UART_SetConfig+0x4e4>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	095b      	lsrs	r3, r3, #5
 8001eaa:	f003 020f 	and.w	r2, r3, #15
 8001eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4422      	add	r2, r4
 8001eb6:	609a      	str	r2, [r3, #8]
}
 8001eb8:	bf00      	nop
 8001eba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ec4:	51eb851f 	.word	0x51eb851f

08001ec8 <__NVIC_SetPriority>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	; (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	; (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001f20:	2100      	movs	r1, #0
 8001f22:	f06f 0004 	mvn.w	r0, #4
 8001f26:	f7ff ffcf 	bl	8001ec8 <__NVIC_SetPriority>
#endif
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f36:	f3ef 8305 	mrs	r3, IPSR
 8001f3a:	603b      	str	r3, [r7, #0]
  return(result);
 8001f3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001f42:	f06f 0305 	mvn.w	r3, #5
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	e00c      	b.n	8001f64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <osKernelInitialize+0x44>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d105      	bne.n	8001f5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <osKernelInitialize+0x44>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	e002      	b.n	8001f64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f64:	687b      	ldr	r3, [r7, #4]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	200000d4 	.word	0x200000d4

08001f78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f7e:	f3ef 8305 	mrs	r3, IPSR
 8001f82:	603b      	str	r3, [r7, #0]
  return(result);
 8001f84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f8a:	f06f 0305 	mvn.w	r3, #5
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	e010      	b.n	8001fb4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <osKernelStart+0x48>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d109      	bne.n	8001fae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f9a:	f7ff ffbf 	bl	8001f1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <osKernelStart+0x48>)
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001fa4:	f001 f866 	bl	8003074 <vTaskStartScheduler>
      stat = osOK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	607b      	str	r3, [r7, #4]
 8001fac:	e002      	b.n	8001fb4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001fb4:	687b      	ldr	r3, [r7, #4]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200000d4 	.word	0x200000d4

08001fc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08e      	sub	sp, #56	; 0x38
 8001fc8:	af04      	add	r7, sp, #16
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fd4:	f3ef 8305 	mrs	r3, IPSR
 8001fd8:	617b      	str	r3, [r7, #20]
  return(result);
 8001fda:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d17e      	bne.n	80020de <osThreadNew+0x11a>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d07b      	beq.n	80020de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001fe6:	2380      	movs	r3, #128	; 0x80
 8001fe8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001fea:	2318      	movs	r3, #24
 8001fec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d045      	beq.n	800208a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <osThreadNew+0x48>
        name = attr->name;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <osThreadNew+0x6e>
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b38      	cmp	r3, #56	; 0x38
 8002024:	d805      	bhi.n	8002032 <osThreadNew+0x6e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <osThreadNew+0x72>
        return (NULL);
 8002032:	2300      	movs	r3, #0
 8002034:	e054      	b.n	80020e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00e      	beq.n	800206c <osThreadNew+0xa8>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b5b      	cmp	r3, #91	; 0x5b
 8002054:	d90a      	bls.n	800206c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800205a:	2b00      	cmp	r3, #0
 800205c:	d006      	beq.n	800206c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d002      	beq.n	800206c <osThreadNew+0xa8>
        mem = 1;
 8002066:	2301      	movs	r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	e010      	b.n	800208e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10c      	bne.n	800208e <osThreadNew+0xca>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d108      	bne.n	800208e <osThreadNew+0xca>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d104      	bne.n	800208e <osThreadNew+0xca>
          mem = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	e001      	b.n	800208e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d110      	bne.n	80020b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800209c:	9202      	str	r2, [sp, #8]
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	6a3a      	ldr	r2, [r7, #32]
 80020a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fe0c 	bl	8002cc8 <xTaskCreateStatic>
 80020b0:	4603      	mov	r3, r0
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	e013      	b.n	80020de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d110      	bne.n	80020de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fe57 	bl	8002d82 <xTaskCreate>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d001      	beq.n	80020de <osThreadNew+0x11a>
            hTask = NULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80020de:	693b      	ldr	r3, [r7, #16]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3728      	adds	r7, #40	; 0x28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020f0:	f3ef 8305 	mrs	r3, IPSR
 80020f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80020f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <osDelay+0x1c>
    stat = osErrorISR;
 80020fc:	f06f 0305 	mvn.w	r3, #5
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	e007      	b.n	8002114 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <osDelay+0x2c>
      vTaskDelay(ticks);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 ff7c 	bl	800300c <vTaskDelay>
    }
  }

  return (stat);
 8002114:	68fb      	ldr	r3, [r7, #12]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4a07      	ldr	r2, [pc, #28]	; (800214c <vApplicationGetIdleTaskMemory+0x2c>)
 8002130:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	4a06      	ldr	r2, [pc, #24]	; (8002150 <vApplicationGetIdleTaskMemory+0x30>)
 8002136:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	601a      	str	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	200000d8 	.word	0x200000d8
 8002150:	20000134 	.word	0x20000134

08002154 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a07      	ldr	r2, [pc, #28]	; (8002180 <vApplicationGetTimerTaskMemory+0x2c>)
 8002164:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4a06      	ldr	r2, [pc, #24]	; (8002184 <vApplicationGetTimerTaskMemory+0x30>)
 800216a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002172:	601a      	str	r2, [r3, #0]
}
 8002174:	bf00      	nop
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr
 8002180:	20000334 	.word	0x20000334
 8002184:	20000390 	.word	0x20000390

08002188 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f103 0208 	add.w	r2, r3, #8
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f103 0208 	add.w	r2, r3, #8
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f103 0208 	add.w	r2, r3, #8
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021e2:	b480      	push	{r7}
 80021e4:	b085      	sub	sp, #20
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	601a      	str	r2, [r3, #0]
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002240:	d103      	bne.n	800224a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	e00c      	b.n	8002264 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3308      	adds	r3, #8
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e002      	b.n	8002258 <vListInsert+0x2e>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	429a      	cmp	r2, r3
 8002262:	d2f6      	bcs.n	8002252 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	601a      	str	r2, [r3, #0]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6892      	ldr	r2, [r2, #8]
 80022b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6852      	ldr	r2, [r2, #4]
 80022bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d103      	bne.n	80022d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	1e5a      	subs	r2, r3, #1
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002308:	f383 8811 	msr	BASEPRI, r3
 800230c:	f3bf 8f6f 	isb	sy
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002316:	bf00      	nop
 8002318:	e7fe      	b.n	8002318 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800231a:	f002 f84b 	bl	80043b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	441a      	add	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2200      	movs	r2, #0
 8002338:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234a:	3b01      	subs	r3, #1
 800234c:	68f9      	ldr	r1, [r7, #12]
 800234e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	441a      	add	r2, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	22ff      	movs	r2, #255	; 0xff
 800235e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	22ff      	movs	r2, #255	; 0xff
 8002366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d114      	bne.n	800239a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d01a      	beq.n	80023ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3310      	adds	r3, #16
 800237c:	4618      	mov	r0, r3
 800237e:	f001 f903 	bl	8003588 <xTaskRemoveFromEventList>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d012      	beq.n	80023ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <xQueueGenericReset+0xcc>)
 800238a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f3bf 8f4f 	dsb	sy
 8002394:	f3bf 8f6f 	isb	sy
 8002398:	e009      	b.n	80023ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	3310      	adds	r3, #16
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fef2 	bl	8002188 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	3324      	adds	r3, #36	; 0x24
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff feed 	bl	8002188 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80023ae:	f002 f831 	bl	8004414 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	e000ed04 	.word	0xe000ed04

080023c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08e      	sub	sp, #56	; 0x38
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10a      	bne.n	80023ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80023d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d8:	f383 8811 	msr	BASEPRI, r3
 80023dc:	f3bf 8f6f 	isb	sy
 80023e0:	f3bf 8f4f 	dsb	sy
 80023e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023e6:	bf00      	nop
 80023e8:	e7fe      	b.n	80023e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002402:	bf00      	nop
 8002404:	e7fe      	b.n	8002404 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <xQueueGenericCreateStatic+0x52>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <xQueueGenericCreateStatic+0x56>
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <xQueueGenericCreateStatic+0x58>
 8002416:	2300      	movs	r3, #0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	623b      	str	r3, [r7, #32]
}
 800242e:	bf00      	nop
 8002430:	e7fe      	b.n	8002430 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d102      	bne.n	800243e <xQueueGenericCreateStatic+0x7e>
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <xQueueGenericCreateStatic+0x82>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <xQueueGenericCreateStatic+0x84>
 8002442:	2300      	movs	r3, #0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10a      	bne.n	800245e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244c:	f383 8811 	msr	BASEPRI, r3
 8002450:	f3bf 8f6f 	isb	sy
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	61fb      	str	r3, [r7, #28]
}
 800245a:	bf00      	nop
 800245c:	e7fe      	b.n	800245c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800245e:	2350      	movs	r3, #80	; 0x50
 8002460:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b50      	cmp	r3, #80	; 0x50
 8002466:	d00a      	beq.n	800247e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	61bb      	str	r3, [r7, #24]
}
 800247a:	bf00      	nop
 800247c:	e7fe      	b.n	800247c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800247e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00d      	beq.n	80024a6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800248a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002492:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	4613      	mov	r3, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 f805 	bl	80024b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3730      	adds	r7, #48	; 0x30
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]
 80024bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e002      	b.n	80024d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024de:	2101      	movs	r1, #1
 80024e0:	69b8      	ldr	r0, [r7, #24]
 80024e2:	f7ff ff05 	bl	80022f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	78fa      	ldrb	r2, [r7, #3]
 80024ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08e      	sub	sp, #56	; 0x38
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002506:	2300      	movs	r3, #0
 8002508:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800250e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <xQueueGenericSend+0x32>
	__asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002526:	bf00      	nop
 8002528:	e7fe      	b.n	8002528 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d103      	bne.n	8002538 <xQueueGenericSend+0x40>
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <xQueueGenericSend+0x44>
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <xQueueGenericSend+0x46>
 800253c:	2300      	movs	r3, #0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10a      	bne.n	8002558 <xQueueGenericSend+0x60>
	__asm volatile
 8002542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002546:	f383 8811 	msr	BASEPRI, r3
 800254a:	f3bf 8f6f 	isb	sy
 800254e:	f3bf 8f4f 	dsb	sy
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002554:	bf00      	nop
 8002556:	e7fe      	b.n	8002556 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d103      	bne.n	8002566 <xQueueGenericSend+0x6e>
 800255e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <xQueueGenericSend+0x72>
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <xQueueGenericSend+0x74>
 800256a:	2300      	movs	r3, #0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <xQueueGenericSend+0x8e>
	__asm volatile
 8002570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002574:	f383 8811 	msr	BASEPRI, r3
 8002578:	f3bf 8f6f 	isb	sy
 800257c:	f3bf 8f4f 	dsb	sy
 8002580:	623b      	str	r3, [r7, #32]
}
 8002582:	bf00      	nop
 8002584:	e7fe      	b.n	8002584 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002586:	f001 f9bd 	bl	8003904 <xTaskGetSchedulerState>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <xQueueGenericSend+0x9e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <xQueueGenericSend+0xa2>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <xQueueGenericSend+0xa4>
 800259a:	2300      	movs	r3, #0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80025a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	61fb      	str	r3, [r7, #28]
}
 80025b2:	bf00      	nop
 80025b4:	e7fe      	b.n	80025b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80025b6:	f001 fefd 	bl	80043b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80025ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d302      	bcc.n	80025cc <xQueueGenericSend+0xd4>
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d129      	bne.n	8002620 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	68b9      	ldr	r1, [r7, #8]
 80025d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025d2:	f000 fa0b 	bl	80029ec <prvCopyDataToQueue>
 80025d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d010      	beq.n	8002602 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e2:	3324      	adds	r3, #36	; 0x24
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 ffcf 	bl	8003588 <xTaskRemoveFromEventList>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d013      	beq.n	8002618 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025f0:	4b3f      	ldr	r3, [pc, #252]	; (80026f0 <xQueueGenericSend+0x1f8>)
 80025f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	e00a      	b.n	8002618 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002608:	4b39      	ldr	r3, [pc, #228]	; (80026f0 <xQueueGenericSend+0x1f8>)
 800260a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	f3bf 8f4f 	dsb	sy
 8002614:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002618:	f001 fefc 	bl	8004414 <vPortExitCritical>
				return pdPASS;
 800261c:	2301      	movs	r3, #1
 800261e:	e063      	b.n	80026e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d103      	bne.n	800262e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002626:	f001 fef5 	bl	8004414 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800262a:	2300      	movs	r3, #0
 800262c:	e05c      	b.n	80026e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800262e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002630:	2b00      	cmp	r3, #0
 8002632:	d106      	bne.n	8002642 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	4618      	mov	r0, r3
 800263a:	f001 f809 	bl	8003650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800263e:	2301      	movs	r3, #1
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002642:	f001 fee7 	bl	8004414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002646:	f000 fd7b 	bl	8003140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800264a:	f001 feb3 	bl	80043b4 <vPortEnterCritical>
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002650:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002654:	b25b      	sxtb	r3, r3
 8002656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800265a:	d103      	bne.n	8002664 <xQueueGenericSend+0x16c>
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800266a:	b25b      	sxtb	r3, r3
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002670:	d103      	bne.n	800267a <xQueueGenericSend+0x182>
 8002672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800267a:	f001 fecb 	bl	8004414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800267e:	1d3a      	adds	r2, r7, #4
 8002680:	f107 0314 	add.w	r3, r7, #20
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fff8 	bl	800367c <xTaskCheckForTimeOut>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d124      	bne.n	80026dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002694:	f000 faa2 	bl	8002bdc <prvIsQueueFull>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d018      	beq.n	80026d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	3310      	adds	r3, #16
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	4611      	mov	r1, r2
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 ff1e 	bl	80034e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80026ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ae:	f000 fa2d 	bl	8002b0c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80026b2:	f000 fd53 	bl	800315c <xTaskResumeAll>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f47f af7c 	bne.w	80025b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <xQueueGenericSend+0x1f8>)
 80026c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	f3bf 8f6f 	isb	sy
 80026ce:	e772      	b.n	80025b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026d2:	f000 fa1b 	bl	8002b0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026d6:	f000 fd41 	bl	800315c <xTaskResumeAll>
 80026da:	e76c      	b.n	80025b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026de:	f000 fa15 	bl	8002b0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026e2:	f000 fd3b 	bl	800315c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3738      	adds	r7, #56	; 0x38
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	e000ed04 	.word	0xe000ed04

080026f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b090      	sub	sp, #64	; 0x40
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800270c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002710:	f383 8811 	msr	BASEPRI, r3
 8002714:	f3bf 8f6f 	isb	sy
 8002718:	f3bf 8f4f 	dsb	sy
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800271e:	bf00      	nop
 8002720:	e7fe      	b.n	8002720 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d103      	bne.n	8002730 <xQueueGenericSendFromISR+0x3c>
 8002728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <xQueueGenericSendFromISR+0x40>
 8002730:	2301      	movs	r3, #1
 8002732:	e000      	b.n	8002736 <xQueueGenericSendFromISR+0x42>
 8002734:	2300      	movs	r3, #0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10a      	bne.n	8002750 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800274c:	bf00      	nop
 800274e:	e7fe      	b.n	800274e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d103      	bne.n	800275e <xQueueGenericSendFromISR+0x6a>
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <xQueueGenericSendFromISR+0x6e>
 800275e:	2301      	movs	r3, #1
 8002760:	e000      	b.n	8002764 <xQueueGenericSendFromISR+0x70>
 8002762:	2300      	movs	r3, #0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d10a      	bne.n	800277e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276c:	f383 8811 	msr	BASEPRI, r3
 8002770:	f3bf 8f6f 	isb	sy
 8002774:	f3bf 8f4f 	dsb	sy
 8002778:	623b      	str	r3, [r7, #32]
}
 800277a:	bf00      	nop
 800277c:	e7fe      	b.n	800277c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800277e:	f001 fefb 	bl	8004578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002782:	f3ef 8211 	mrs	r2, BASEPRI
 8002786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278a:	f383 8811 	msr	BASEPRI, r3
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f3bf 8f4f 	dsb	sy
 8002796:	61fa      	str	r2, [r7, #28]
 8002798:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800279a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800279c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800279e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d302      	bcc.n	80027b0 <xQueueGenericSendFromISR+0xbc>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d12f      	bne.n	8002810 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80027b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	68b9      	ldr	r1, [r7, #8]
 80027c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80027c6:	f000 f911 	bl	80029ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80027ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d2:	d112      	bne.n	80027fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d016      	beq.n	800280a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027de:	3324      	adds	r3, #36	; 0x24
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fed1 	bl	8003588 <xTaskRemoveFromEventList>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00e      	beq.n	800280a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	e007      	b.n	800280a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80027fe:	3301      	adds	r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	b25a      	sxtb	r2, r3
 8002804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800280a:	2301      	movs	r3, #1
 800280c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800280e:	e001      	b.n	8002814 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002810:	2300      	movs	r3, #0
 8002812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002816:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800281e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002822:	4618      	mov	r0, r3
 8002824:	3740      	adds	r7, #64	; 0x40
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	; 0x30
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002838:	2300      	movs	r3, #0
 800283a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10a      	bne.n	800285c <xQueueReceive+0x30>
	__asm volatile
 8002846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	623b      	str	r3, [r7, #32]
}
 8002858:	bf00      	nop
 800285a:	e7fe      	b.n	800285a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d103      	bne.n	800286a <xQueueReceive+0x3e>
 8002862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <xQueueReceive+0x42>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <xQueueReceive+0x44>
 800286e:	2300      	movs	r3, #0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <xQueueReceive+0x5e>
	__asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	61fb      	str	r3, [r7, #28]
}
 8002886:	bf00      	nop
 8002888:	e7fe      	b.n	8002888 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800288a:	f001 f83b 	bl	8003904 <xTaskGetSchedulerState>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <xQueueReceive+0x6e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <xQueueReceive+0x72>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <xQueueReceive+0x74>
 800289e:	2300      	movs	r3, #0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10a      	bne.n	80028ba <xQueueReceive+0x8e>
	__asm volatile
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	61bb      	str	r3, [r7, #24]
}
 80028b6:	bf00      	nop
 80028b8:	e7fe      	b.n	80028b8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028ba:	f001 fd7b 	bl	80043b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01f      	beq.n	800290a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ce:	f000 f8f7 	bl	8002ac0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	1e5a      	subs	r2, r3, #1
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00f      	beq.n	8002902 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e4:	3310      	adds	r3, #16
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 fe4e 	bl	8003588 <xTaskRemoveFromEventList>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028f2:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <xQueueReceive+0x1bc>)
 80028f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	f3bf 8f4f 	dsb	sy
 80028fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002902:	f001 fd87 	bl	8004414 <vPortExitCritical>
				return pdPASS;
 8002906:	2301      	movs	r3, #1
 8002908:	e069      	b.n	80029de <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d103      	bne.n	8002918 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002910:	f001 fd80 	bl	8004414 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002914:	2300      	movs	r3, #0
 8002916:	e062      	b.n	80029de <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800291e:	f107 0310 	add.w	r3, r7, #16
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fe94 	bl	8003650 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002928:	2301      	movs	r3, #1
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800292c:	f001 fd72 	bl	8004414 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002930:	f000 fc06 	bl	8003140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002934:	f001 fd3e 	bl	80043b4 <vPortEnterCritical>
 8002938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800293e:	b25b      	sxtb	r3, r3
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002944:	d103      	bne.n	800294e <xQueueReceive+0x122>
 8002946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800294e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002954:	b25b      	sxtb	r3, r3
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800295a:	d103      	bne.n	8002964 <xQueueReceive+0x138>
 800295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002964:	f001 fd56 	bl	8004414 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002968:	1d3a      	adds	r2, r7, #4
 800296a:	f107 0310 	add.w	r3, r7, #16
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f000 fe83 	bl	800367c <xTaskCheckForTimeOut>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d123      	bne.n	80029c4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800297c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800297e:	f000 f917 	bl	8002bb0 <prvIsQueueEmpty>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d017      	beq.n	80029b8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	3324      	adds	r3, #36	; 0x24
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fda9 	bl	80034e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002998:	f000 f8b8 	bl	8002b0c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800299c:	f000 fbde 	bl	800315c <xTaskResumeAll>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d189      	bne.n	80028ba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80029a6:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <xQueueReceive+0x1bc>)
 80029a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	f3bf 8f6f 	isb	sy
 80029b6:	e780      	b.n	80028ba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ba:	f000 f8a7 	bl	8002b0c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029be:	f000 fbcd 	bl	800315c <xTaskResumeAll>
 80029c2:	e77a      	b.n	80028ba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029c6:	f000 f8a1 	bl	8002b0c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029ca:	f000 fbc7 	bl	800315c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029d0:	f000 f8ee 	bl	8002bb0 <prvIsQueueEmpty>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f43f af6f 	beq.w	80028ba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3730      	adds	r7, #48	; 0x30
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000ed04 	.word	0xe000ed04

080029ec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10d      	bne.n	8002a26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d14d      	bne.n	8002aae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 ff92 	bl	8003940 <xTaskPriorityDisinherit>
 8002a1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	e043      	b.n	8002aae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d119      	bne.n	8002a60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6858      	ldr	r0, [r3, #4]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a34:	461a      	mov	r2, r3
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	f001 fff4 	bl	8004a24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	441a      	add	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d32b      	bcc.n	8002aae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	e026      	b.n	8002aae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	68d8      	ldr	r0, [r3, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	f001 ffda 	bl	8004a24 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	425b      	negs	r3, r3
 8002a7a:	441a      	add	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d207      	bcs.n	8002a9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	425b      	negs	r3, r3
 8002a96:	441a      	add	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d105      	bne.n	8002aae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d002      	beq.n	8002aae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ab6:	697b      	ldr	r3, [r7, #20]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d018      	beq.n	8002b04 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	441a      	add	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d303      	bcc.n	8002af4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68d9      	ldr	r1, [r3, #12]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	461a      	mov	r2, r3
 8002afe:	6838      	ldr	r0, [r7, #0]
 8002b00:	f001 ff90 	bl	8004a24 <memcpy>
	}
}
 8002b04:	bf00      	nop
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b14:	f001 fc4e 	bl	80043b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b1e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b20:	e011      	b.n	8002b46 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d012      	beq.n	8002b50 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3324      	adds	r3, #36	; 0x24
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 fd2a 	bl	8003588 <xTaskRemoveFromEventList>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b3a:	f000 fe01 	bl	8003740 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	dce9      	bgt.n	8002b22 <prvUnlockQueue+0x16>
 8002b4e:	e000      	b.n	8002b52 <prvUnlockQueue+0x46>
					break;
 8002b50:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	22ff      	movs	r2, #255	; 0xff
 8002b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002b5a:	f001 fc5b 	bl	8004414 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b5e:	f001 fc29 	bl	80043b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b68:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b6a:	e011      	b.n	8002b90 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d012      	beq.n	8002b9a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3310      	adds	r3, #16
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fd05 	bl	8003588 <xTaskRemoveFromEventList>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b84:	f000 fddc 	bl	8003740 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b88:	7bbb      	ldrb	r3, [r7, #14]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	dce9      	bgt.n	8002b6c <prvUnlockQueue+0x60>
 8002b98:	e000      	b.n	8002b9c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b9a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	22ff      	movs	r2, #255	; 0xff
 8002ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ba4:	f001 fc36 	bl	8004414 <vPortExitCritical>
}
 8002ba8:	bf00      	nop
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bb8:	f001 fbfc 	bl	80043b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	e001      	b.n	8002bce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bce:	f001 fc21 	bl	8004414 <vPortExitCritical>

	return xReturn;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002be4:	f001 fbe6 	bl	80043b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d102      	bne.n	8002bfa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	e001      	b.n	8002bfe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bfe:	f001 fc09 	bl	8004414 <vPortExitCritical>

	return xReturn;
 8002c02:	68fb      	ldr	r3, [r7, #12]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	e014      	b.n	8002c46 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c1c:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <vQueueAddToRegistry+0x50>)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c28:	490c      	ldr	r1, [pc, #48]	; (8002c5c <vQueueAddToRegistry+0x50>)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <vQueueAddToRegistry+0x50>)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c3e:	e006      	b.n	8002c4e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	3301      	adds	r3, #1
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b07      	cmp	r3, #7
 8002c4a:	d9e7      	bls.n	8002c1c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000790 	.word	0x20000790

08002c60 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c70:	f001 fba0 	bl	80043b4 <vPortEnterCritical>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c80:	d103      	bne.n	8002c8a <vQueueWaitForMessageRestricted+0x2a>
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c90:	b25b      	sxtb	r3, r3
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c96:	d103      	bne.n	8002ca0 <vQueueWaitForMessageRestricted+0x40>
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ca0:	f001 fbb8 	bl	8004414 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d106      	bne.n	8002cba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	3324      	adds	r3, #36	; 0x24
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fc3b 	bl	8003530 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002cba:	6978      	ldr	r0, [r7, #20]
 8002cbc:	f7ff ff26 	bl	8002b0c <prvUnlockQueue>
	}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08e      	sub	sp, #56	; 0x38
 8002ccc:	af04      	add	r7, sp, #16
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
 8002cd4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	623b      	str	r3, [r7, #32]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <xTaskCreateStatic+0x46>
	__asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	61fb      	str	r3, [r7, #28]
}
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d0e:	235c      	movs	r3, #92	; 0x5c
 8002d10:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b5c      	cmp	r3, #92	; 0x5c
 8002d16:	d00a      	beq.n	8002d2e <xTaskCreateStatic+0x66>
	__asm volatile
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	61bb      	str	r3, [r7, #24]
}
 8002d2a:	bf00      	nop
 8002d2c:	e7fe      	b.n	8002d2c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01e      	beq.n	8002d74 <xTaskCreateStatic+0xac>
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01b      	beq.n	8002d74 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d44:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d4e:	2300      	movs	r3, #0
 8002d50:	9303      	str	r3, [sp, #12]
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	9302      	str	r3, [sp, #8]
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	9301      	str	r3, [sp, #4]
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	9300      	str	r3, [sp, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f850 	bl	8002e0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d6e:	f000 f8dd 	bl	8002f2c <prvAddNewTaskToReadyList>
 8002d72:	e001      	b.n	8002d78 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d78:	697b      	ldr	r3, [r7, #20]
	}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3728      	adds	r7, #40	; 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b08c      	sub	sp, #48	; 0x30
 8002d86:	af04      	add	r7, sp, #16
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f001 fc2e 	bl	80045f8 <pvPortMalloc>
 8002d9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00e      	beq.n	8002dc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002da4:	205c      	movs	r0, #92	; 0x5c
 8002da6:	f001 fc27 	bl	80045f8 <pvPortMalloc>
 8002daa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d003      	beq.n	8002dba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	631a      	str	r2, [r3, #48]	; 0x30
 8002db8:	e005      	b.n	8002dc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dba:	6978      	ldr	r0, [r7, #20]
 8002dbc:	f001 fce8 	bl	8004790 <vPortFree>
 8002dc0:	e001      	b.n	8002dc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d017      	beq.n	8002dfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dd4:	88fa      	ldrh	r2, [r7, #6]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	9303      	str	r3, [sp, #12]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	9302      	str	r3, [sp, #8]
 8002dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68b9      	ldr	r1, [r7, #8]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f80e 	bl	8002e0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002df0:	69f8      	ldr	r0, [r7, #28]
 8002df2:	f000 f89b 	bl	8002f2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002df6:	2301      	movs	r3, #1
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e002      	b.n	8002e02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e02:	69bb      	ldr	r3, [r7, #24]
	}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3720      	adds	r7, #32
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
 8002e18:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	461a      	mov	r2, r3
 8002e24:	21a5      	movs	r1, #165	; 0xa5
 8002e26:	f001 fdd1 	bl	80049cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e34:	3b01      	subs	r3, #1
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	f023 0307 	bic.w	r3, r3, #7
 8002e42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e52:	f383 8811 	msr	BASEPRI, r3
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	f3bf 8f4f 	dsb	sy
 8002e5e:	617b      	str	r3, [r7, #20]
}
 8002e60:	bf00      	nop
 8002e62:	e7fe      	b.n	8002e62 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01f      	beq.n	8002eaa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	e012      	b.n	8002e96 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	4413      	add	r3, r2
 8002e76:	7819      	ldrb	r1, [r3, #0]
 8002e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3334      	adds	r3, #52	; 0x34
 8002e80:	460a      	mov	r2, r1
 8002e82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	4413      	add	r3, r2
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	3301      	adds	r3, #1
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	2b0f      	cmp	r3, #15
 8002e9a:	d9e9      	bls.n	8002e70 <prvInitialiseNewTask+0x64>
 8002e9c:	e000      	b.n	8002ea0 <prvInitialiseNewTask+0x94>
			{
				break;
 8002e9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ea8:	e003      	b.n	8002eb2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb4:	2b37      	cmp	r3, #55	; 0x37
 8002eb6:	d901      	bls.n	8002ebc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002eb8:	2337      	movs	r3, #55	; 0x37
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ec6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eca:	2200      	movs	r2, #0
 8002ecc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed0:	3304      	adds	r3, #4
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f978 	bl	80021c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	3318      	adds	r3, #24
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff f973 	bl	80021c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ee6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efa:	2200      	movs	r2, #0
 8002efc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	68f9      	ldr	r1, [r7, #12]
 8002f0a:	69b8      	ldr	r0, [r7, #24]
 8002f0c:	f001 f928 	bl	8004160 <pxPortInitialiseStack>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f22:	bf00      	nop
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f34:	f001 fa3e 	bl	80043b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f38:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <prvAddNewTaskToReadyList+0xc4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	4a2c      	ldr	r2, [pc, #176]	; (8002ff0 <prvAddNewTaskToReadyList+0xc4>)
 8002f40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f42:	4b2c      	ldr	r3, [pc, #176]	; (8002ff4 <prvAddNewTaskToReadyList+0xc8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f4a:	4a2a      	ldr	r2, [pc, #168]	; (8002ff4 <prvAddNewTaskToReadyList+0xc8>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f50:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <prvAddNewTaskToReadyList+0xc4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d110      	bne.n	8002f7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f58:	f000 fc16 	bl	8003788 <prvInitialiseTaskLists>
 8002f5c:	e00d      	b.n	8002f7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f5e:	4b26      	ldr	r3, [pc, #152]	; (8002ff8 <prvAddNewTaskToReadyList+0xcc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d109      	bne.n	8002f7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f66:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <prvAddNewTaskToReadyList+0xc8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d802      	bhi.n	8002f7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f74:	4a1f      	ldr	r2, [pc, #124]	; (8002ff4 <prvAddNewTaskToReadyList+0xc8>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f7a:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <prvAddNewTaskToReadyList+0xd0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	4a1e      	ldr	r2, [pc, #120]	; (8002ffc <prvAddNewTaskToReadyList+0xd0>)
 8002f82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f84:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <prvAddNewTaskToReadyList+0xd0>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f90:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <prvAddNewTaskToReadyList+0xd4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d903      	bls.n	8002fa0 <prvAddNewTaskToReadyList+0x74>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	4a18      	ldr	r2, [pc, #96]	; (8003000 <prvAddNewTaskToReadyList+0xd4>)
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <prvAddNewTaskToReadyList+0xd8>)
 8002fae:	441a      	add	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	f7ff f913 	bl	80021e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fbc:	f001 fa2a 	bl	8004414 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fc0:	4b0d      	ldr	r3, [pc, #52]	; (8002ff8 <prvAddNewTaskToReadyList+0xcc>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00e      	beq.n	8002fe6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <prvAddNewTaskToReadyList+0xc8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d207      	bcs.n	8002fe6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <prvAddNewTaskToReadyList+0xdc>)
 8002fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	f3bf 8f4f 	dsb	sy
 8002fe2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000ca4 	.word	0x20000ca4
 8002ff4:	200007d0 	.word	0x200007d0
 8002ff8:	20000cb0 	.word	0x20000cb0
 8002ffc:	20000cc0 	.word	0x20000cc0
 8003000:	20000cac 	.word	0x20000cac
 8003004:	200007d4 	.word	0x200007d4
 8003008:	e000ed04 	.word	0xe000ed04

0800300c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d017      	beq.n	800304e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800301e:	4b13      	ldr	r3, [pc, #76]	; (800306c <vTaskDelay+0x60>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <vTaskDelay+0x30>
	__asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	60bb      	str	r3, [r7, #8]
}
 8003038:	bf00      	nop
 800303a:	e7fe      	b.n	800303a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800303c:	f000 f880 	bl	8003140 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003040:	2100      	movs	r1, #0
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fcea 	bl	8003a1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003048:	f000 f888 	bl	800315c <xTaskResumeAll>
 800304c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d107      	bne.n	8003064 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <vTaskDelay+0x64>)
 8003056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800305a:	601a      	str	r2, [r3, #0]
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003064:	bf00      	nop
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000ccc 	.word	0x20000ccc
 8003070:	e000ed04 	.word	0xe000ed04

08003074 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	; 0x28
 8003078:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800307a:	2300      	movs	r3, #0
 800307c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800307e:	2300      	movs	r3, #0
 8003080:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003082:	463a      	mov	r2, r7
 8003084:	1d39      	adds	r1, r7, #4
 8003086:	f107 0308 	add.w	r3, r7, #8
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f848 	bl	8002120 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003090:	6839      	ldr	r1, [r7, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	9202      	str	r2, [sp, #8]
 8003098:	9301      	str	r3, [sp, #4]
 800309a:	2300      	movs	r3, #0
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	2300      	movs	r3, #0
 80030a0:	460a      	mov	r2, r1
 80030a2:	4921      	ldr	r1, [pc, #132]	; (8003128 <vTaskStartScheduler+0xb4>)
 80030a4:	4821      	ldr	r0, [pc, #132]	; (800312c <vTaskStartScheduler+0xb8>)
 80030a6:	f7ff fe0f 	bl	8002cc8 <xTaskCreateStatic>
 80030aa:	4603      	mov	r3, r0
 80030ac:	4a20      	ldr	r2, [pc, #128]	; (8003130 <vTaskStartScheduler+0xbc>)
 80030ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80030b0:	4b1f      	ldr	r3, [pc, #124]	; (8003130 <vTaskStartScheduler+0xbc>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80030b8:	2301      	movs	r3, #1
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	e001      	b.n	80030c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d102      	bne.n	80030ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80030c8:	f000 fcfc 	bl	8003ac4 <xTimerCreateTimerTask>
 80030cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d116      	bne.n	8003102 <vTaskStartScheduler+0x8e>
	__asm volatile
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	613b      	str	r3, [r7, #16]
}
 80030e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030e8:	4b12      	ldr	r3, [pc, #72]	; (8003134 <vTaskStartScheduler+0xc0>)
 80030ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030f0:	4b11      	ldr	r3, [pc, #68]	; (8003138 <vTaskStartScheduler+0xc4>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <vTaskStartScheduler+0xc8>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030fc:	f001 f8b8 	bl	8004270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003100:	e00e      	b.n	8003120 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003108:	d10a      	bne.n	8003120 <vTaskStartScheduler+0xac>
	__asm volatile
 800310a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310e:	f383 8811 	msr	BASEPRI, r3
 8003112:	f3bf 8f6f 	isb	sy
 8003116:	f3bf 8f4f 	dsb	sy
 800311a:	60fb      	str	r3, [r7, #12]
}
 800311c:	bf00      	nop
 800311e:	e7fe      	b.n	800311e <vTaskStartScheduler+0xaa>
}
 8003120:	bf00      	nop
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	08004a98 	.word	0x08004a98
 800312c:	08003759 	.word	0x08003759
 8003130:	20000cc8 	.word	0x20000cc8
 8003134:	20000cc4 	.word	0x20000cc4
 8003138:	20000cb0 	.word	0x20000cb0
 800313c:	20000ca8 	.word	0x20000ca8

08003140 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003144:	4b04      	ldr	r3, [pc, #16]	; (8003158 <vTaskSuspendAll+0x18>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	3301      	adds	r3, #1
 800314a:	4a03      	ldr	r2, [pc, #12]	; (8003158 <vTaskSuspendAll+0x18>)
 800314c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	20000ccc 	.word	0x20000ccc

0800315c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800316a:	4b42      	ldr	r3, [pc, #264]	; (8003274 <xTaskResumeAll+0x118>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <xTaskResumeAll+0x2c>
	__asm volatile
 8003172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	603b      	str	r3, [r7, #0]
}
 8003184:	bf00      	nop
 8003186:	e7fe      	b.n	8003186 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003188:	f001 f914 	bl	80043b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800318c:	4b39      	ldr	r3, [pc, #228]	; (8003274 <xTaskResumeAll+0x118>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3b01      	subs	r3, #1
 8003192:	4a38      	ldr	r2, [pc, #224]	; (8003274 <xTaskResumeAll+0x118>)
 8003194:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003196:	4b37      	ldr	r3, [pc, #220]	; (8003274 <xTaskResumeAll+0x118>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d162      	bne.n	8003264 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800319e:	4b36      	ldr	r3, [pc, #216]	; (8003278 <xTaskResumeAll+0x11c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d05e      	beq.n	8003264 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031a6:	e02f      	b.n	8003208 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a8:	4b34      	ldr	r3, [pc, #208]	; (800327c <xTaskResumeAll+0x120>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3318      	adds	r3, #24
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff f871 	bl	800229c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3304      	adds	r3, #4
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff f86c 	bl	800229c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c8:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <xTaskResumeAll+0x124>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d903      	bls.n	80031d8 <xTaskResumeAll+0x7c>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	4a2a      	ldr	r2, [pc, #168]	; (8003280 <xTaskResumeAll+0x124>)
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4a27      	ldr	r2, [pc, #156]	; (8003284 <xTaskResumeAll+0x128>)
 80031e6:	441a      	add	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	3304      	adds	r3, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f7fe fff7 	bl	80021e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f8:	4b23      	ldr	r3, [pc, #140]	; (8003288 <xTaskResumeAll+0x12c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	429a      	cmp	r2, r3
 8003200:	d302      	bcc.n	8003208 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003202:	4b22      	ldr	r3, [pc, #136]	; (800328c <xTaskResumeAll+0x130>)
 8003204:	2201      	movs	r2, #1
 8003206:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003208:	4b1c      	ldr	r3, [pc, #112]	; (800327c <xTaskResumeAll+0x120>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d1cb      	bne.n	80031a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003216:	f000 fb55 	bl	80038c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800321a:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <xTaskResumeAll+0x134>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d010      	beq.n	8003248 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003226:	f000 f847 	bl	80032b8 <xTaskIncrementTick>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <xTaskResumeAll+0x130>)
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3b01      	subs	r3, #1
 800323a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f1      	bne.n	8003226 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003242:	4b13      	ldr	r3, [pc, #76]	; (8003290 <xTaskResumeAll+0x134>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003248:	4b10      	ldr	r3, [pc, #64]	; (800328c <xTaskResumeAll+0x130>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003250:	2301      	movs	r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <xTaskResumeAll+0x138>)
 8003256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003264:	f001 f8d6 	bl	8004414 <vPortExitCritical>

	return xAlreadyYielded;
 8003268:	68bb      	ldr	r3, [r7, #8]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000ccc 	.word	0x20000ccc
 8003278:	20000ca4 	.word	0x20000ca4
 800327c:	20000c64 	.word	0x20000c64
 8003280:	20000cac 	.word	0x20000cac
 8003284:	200007d4 	.word	0x200007d4
 8003288:	200007d0 	.word	0x200007d0
 800328c:	20000cb8 	.word	0x20000cb8
 8003290:	20000cb4 	.word	0x20000cb4
 8003294:	e000ed04 	.word	0xe000ed04

08003298 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800329e:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <xTaskGetTickCount+0x1c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80032a4:	687b      	ldr	r3, [r7, #4]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	20000ca8 	.word	0x20000ca8

080032b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80032be:	2300      	movs	r3, #0
 80032c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032c2:	4b4f      	ldr	r3, [pc, #316]	; (8003400 <xTaskIncrementTick+0x148>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f040 808f 	bne.w	80033ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032cc:	4b4d      	ldr	r3, [pc, #308]	; (8003404 <xTaskIncrementTick+0x14c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3301      	adds	r3, #1
 80032d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80032d4:	4a4b      	ldr	r2, [pc, #300]	; (8003404 <xTaskIncrementTick+0x14c>)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d120      	bne.n	8003322 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80032e0:	4b49      	ldr	r3, [pc, #292]	; (8003408 <xTaskIncrementTick+0x150>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <xTaskIncrementTick+0x48>
	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	603b      	str	r3, [r7, #0]
}
 80032fc:	bf00      	nop
 80032fe:	e7fe      	b.n	80032fe <xTaskIncrementTick+0x46>
 8003300:	4b41      	ldr	r3, [pc, #260]	; (8003408 <xTaskIncrementTick+0x150>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	4b41      	ldr	r3, [pc, #260]	; (800340c <xTaskIncrementTick+0x154>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a3f      	ldr	r2, [pc, #252]	; (8003408 <xTaskIncrementTick+0x150>)
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4a3f      	ldr	r2, [pc, #252]	; (800340c <xTaskIncrementTick+0x154>)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	4b3e      	ldr	r3, [pc, #248]	; (8003410 <xTaskIncrementTick+0x158>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3301      	adds	r3, #1
 800331a:	4a3d      	ldr	r2, [pc, #244]	; (8003410 <xTaskIncrementTick+0x158>)
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	f000 fad1 	bl	80038c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003322:	4b3c      	ldr	r3, [pc, #240]	; (8003414 <xTaskIncrementTick+0x15c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	429a      	cmp	r2, r3
 800332a:	d349      	bcc.n	80033c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800332c:	4b36      	ldr	r3, [pc, #216]	; (8003408 <xTaskIncrementTick+0x150>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d104      	bne.n	8003340 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003336:	4b37      	ldr	r3, [pc, #220]	; (8003414 <xTaskIncrementTick+0x15c>)
 8003338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800333c:	601a      	str	r2, [r3, #0]
					break;
 800333e:	e03f      	b.n	80033c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003340:	4b31      	ldr	r3, [pc, #196]	; (8003408 <xTaskIncrementTick+0x150>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	d203      	bcs.n	8003360 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003358:	4a2e      	ldr	r2, [pc, #184]	; (8003414 <xTaskIncrementTick+0x15c>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800335e:	e02f      	b.n	80033c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	3304      	adds	r3, #4
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe ff99 	bl	800229c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	3318      	adds	r3, #24
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe ff90 	bl	800229c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003380:	4b25      	ldr	r3, [pc, #148]	; (8003418 <xTaskIncrementTick+0x160>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d903      	bls.n	8003390 <xTaskIncrementTick+0xd8>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	4a22      	ldr	r2, [pc, #136]	; (8003418 <xTaskIncrementTick+0x160>)
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4a1f      	ldr	r2, [pc, #124]	; (800341c <xTaskIncrementTick+0x164>)
 800339e:	441a      	add	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	3304      	adds	r3, #4
 80033a4:	4619      	mov	r1, r3
 80033a6:	4610      	mov	r0, r2
 80033a8:	f7fe ff1b 	bl	80021e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033b0:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <xTaskIncrementTick+0x168>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d3b8      	bcc.n	800332c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80033ba:	2301      	movs	r3, #1
 80033bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033be:	e7b5      	b.n	800332c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033c0:	4b17      	ldr	r3, [pc, #92]	; (8003420 <xTaskIncrementTick+0x168>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c6:	4915      	ldr	r1, [pc, #84]	; (800341c <xTaskIncrementTick+0x164>)
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d901      	bls.n	80033dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80033d8:	2301      	movs	r3, #1
 80033da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <xTaskIncrementTick+0x16c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	e004      	b.n	80033f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80033ea:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <xTaskIncrementTick+0x170>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3301      	adds	r3, #1
 80033f0:	4a0d      	ldr	r2, [pc, #52]	; (8003428 <xTaskIncrementTick+0x170>)
 80033f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80033f4:	697b      	ldr	r3, [r7, #20]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	20000ccc 	.word	0x20000ccc
 8003404:	20000ca8 	.word	0x20000ca8
 8003408:	20000c5c 	.word	0x20000c5c
 800340c:	20000c60 	.word	0x20000c60
 8003410:	20000cbc 	.word	0x20000cbc
 8003414:	20000cc4 	.word	0x20000cc4
 8003418:	20000cac 	.word	0x20000cac
 800341c:	200007d4 	.word	0x200007d4
 8003420:	200007d0 	.word	0x200007d0
 8003424:	20000cb8 	.word	0x20000cb8
 8003428:	20000cb4 	.word	0x20000cb4

0800342c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003432:	4b28      	ldr	r3, [pc, #160]	; (80034d4 <vTaskSwitchContext+0xa8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800343a:	4b27      	ldr	r3, [pc, #156]	; (80034d8 <vTaskSwitchContext+0xac>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003440:	e041      	b.n	80034c6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003442:	4b25      	ldr	r3, [pc, #148]	; (80034d8 <vTaskSwitchContext+0xac>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003448:	4b24      	ldr	r3, [pc, #144]	; (80034dc <vTaskSwitchContext+0xb0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	e010      	b.n	8003472 <vTaskSwitchContext+0x46>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10a      	bne.n	800346c <vTaskSwitchContext+0x40>
	__asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	607b      	str	r3, [r7, #4]
}
 8003468:	bf00      	nop
 800346a:	e7fe      	b.n	800346a <vTaskSwitchContext+0x3e>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3b01      	subs	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	491b      	ldr	r1, [pc, #108]	; (80034e0 <vTaskSwitchContext+0xb4>)
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	440b      	add	r3, r1
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0e4      	beq.n	8003450 <vTaskSwitchContext+0x24>
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <vTaskSwitchContext+0xb4>)
 8003492:	4413      	add	r3, r2
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	3308      	adds	r3, #8
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d104      	bne.n	80034b6 <vTaskSwitchContext+0x8a>
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	4a09      	ldr	r2, [pc, #36]	; (80034e4 <vTaskSwitchContext+0xb8>)
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4a06      	ldr	r2, [pc, #24]	; (80034dc <vTaskSwitchContext+0xb0>)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6013      	str	r3, [r2, #0]
}
 80034c6:	bf00      	nop
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000ccc 	.word	0x20000ccc
 80034d8:	20000cb8 	.word	0x20000cb8
 80034dc:	20000cac 	.word	0x20000cac
 80034e0:	200007d4 	.word	0x200007d4
 80034e4:	200007d0 	.word	0x200007d0

080034e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	60fb      	str	r3, [r7, #12]
}
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800350e:	4b07      	ldr	r3, [pc, #28]	; (800352c <vTaskPlaceOnEventList+0x44>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3318      	adds	r3, #24
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fe fe87 	bl	800222a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800351c:	2101      	movs	r1, #1
 800351e:	6838      	ldr	r0, [r7, #0]
 8003520:	f000 fa7c 	bl	8003a1c <prvAddCurrentTaskToDelayedList>
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	200007d0 	.word	0x200007d0

08003530 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	617b      	str	r3, [r7, #20]
}
 8003554:	bf00      	nop
 8003556:	e7fe      	b.n	8003556 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003558:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <vTaskPlaceOnEventListRestricted+0x54>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3318      	adds	r3, #24
 800355e:	4619      	mov	r1, r3
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7fe fe3e 	bl	80021e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800356c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003570:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	68b8      	ldr	r0, [r7, #8]
 8003576:	f000 fa51 	bl	8003a1c <prvAddCurrentTaskToDelayedList>
	}
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200007d0 	.word	0x200007d0

08003588 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10a      	bne.n	80035b4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	60fb      	str	r3, [r7, #12]
}
 80035b0:	bf00      	nop
 80035b2:	e7fe      	b.n	80035b2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	3318      	adds	r3, #24
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7fe fe6f 	bl	800229c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035be:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <xTaskRemoveFromEventList+0xb0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d11d      	bne.n	8003602 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	3304      	adds	r3, #4
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe fe66 	bl	800229c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <xTaskRemoveFromEventList+0xb4>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d903      	bls.n	80035e4 <xTaskRemoveFromEventList+0x5c>
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e0:	4a16      	ldr	r2, [pc, #88]	; (800363c <xTaskRemoveFromEventList+0xb4>)
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <xTaskRemoveFromEventList+0xb8>)
 80035f2:	441a      	add	r2, r3
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	3304      	adds	r3, #4
 80035f8:	4619      	mov	r1, r3
 80035fa:	4610      	mov	r0, r2
 80035fc:	f7fe fdf1 	bl	80021e2 <vListInsertEnd>
 8003600:	e005      	b.n	800360e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	3318      	adds	r3, #24
 8003606:	4619      	mov	r1, r3
 8003608:	480e      	ldr	r0, [pc, #56]	; (8003644 <xTaskRemoveFromEventList+0xbc>)
 800360a:	f7fe fdea 	bl	80021e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003612:	4b0d      	ldr	r3, [pc, #52]	; (8003648 <xTaskRemoveFromEventList+0xc0>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	429a      	cmp	r2, r3
 800361a:	d905      	bls.n	8003628 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800361c:	2301      	movs	r3, #1
 800361e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <xTaskRemoveFromEventList+0xc4>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	e001      	b.n	800362c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800362c:	697b      	ldr	r3, [r7, #20]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	20000ccc 	.word	0x20000ccc
 800363c:	20000cac 	.word	0x20000cac
 8003640:	200007d4 	.word	0x200007d4
 8003644:	20000c64 	.word	0x20000c64
 8003648:	200007d0 	.word	0x200007d0
 800364c:	20000cb8 	.word	0x20000cb8

08003650 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <vTaskInternalSetTimeOutState+0x24>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <vTaskInternalSetTimeOutState+0x28>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	605a      	str	r2, [r3, #4]
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	20000cbc 	.word	0x20000cbc
 8003678:	20000ca8 	.word	0x20000ca8

0800367c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	613b      	str	r3, [r7, #16]
}
 800369e:	bf00      	nop
 80036a0:	e7fe      	b.n	80036a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	60fb      	str	r3, [r7, #12]
}
 80036ba:	bf00      	nop
 80036bc:	e7fe      	b.n	80036bc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80036be:	f000 fe79 	bl	80043b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036c2:	4b1d      	ldr	r3, [pc, #116]	; (8003738 <xTaskCheckForTimeOut+0xbc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036da:	d102      	bne.n	80036e2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036dc:	2300      	movs	r3, #0
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	e023      	b.n	800372a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <xTaskCheckForTimeOut+0xc0>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d007      	beq.n	80036fe <xTaskCheckForTimeOut+0x82>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d302      	bcc.n	80036fe <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	61fb      	str	r3, [r7, #28]
 80036fc:	e015      	b.n	800372a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	429a      	cmp	r2, r3
 8003706:	d20b      	bcs.n	8003720 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	1ad2      	subs	r2, r2, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ff9b 	bl	8003650 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e004      	b.n	800372a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003726:	2301      	movs	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800372a:	f000 fe73 	bl	8004414 <vPortExitCritical>

	return xReturn;
 800372e:	69fb      	ldr	r3, [r7, #28]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3720      	adds	r7, #32
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000ca8 	.word	0x20000ca8
 800373c:	20000cbc 	.word	0x20000cbc

08003740 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <vTaskMissedYield+0x14>)
 8003746:	2201      	movs	r2, #1
 8003748:	601a      	str	r2, [r3, #0]
}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	20000cb8 	.word	0x20000cb8

08003758 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003760:	f000 f852 	bl	8003808 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003764:	4b06      	ldr	r3, [pc, #24]	; (8003780 <prvIdleTask+0x28>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d9f9      	bls.n	8003760 <prvIdleTask+0x8>
			{
				taskYIELD();
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <prvIdleTask+0x2c>)
 800376e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800377c:	e7f0      	b.n	8003760 <prvIdleTask+0x8>
 800377e:	bf00      	nop
 8003780:	200007d4 	.word	0x200007d4
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800378e:	2300      	movs	r3, #0
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	e00c      	b.n	80037ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <prvInitialiseTaskLists+0x60>)
 80037a0:	4413      	add	r3, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fcf0 	bl	8002188 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3301      	adds	r3, #1
 80037ac:	607b      	str	r3, [r7, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b37      	cmp	r3, #55	; 0x37
 80037b2:	d9ef      	bls.n	8003794 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80037b4:	480d      	ldr	r0, [pc, #52]	; (80037ec <prvInitialiseTaskLists+0x64>)
 80037b6:	f7fe fce7 	bl	8002188 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80037ba:	480d      	ldr	r0, [pc, #52]	; (80037f0 <prvInitialiseTaskLists+0x68>)
 80037bc:	f7fe fce4 	bl	8002188 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037c0:	480c      	ldr	r0, [pc, #48]	; (80037f4 <prvInitialiseTaskLists+0x6c>)
 80037c2:	f7fe fce1 	bl	8002188 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037c6:	480c      	ldr	r0, [pc, #48]	; (80037f8 <prvInitialiseTaskLists+0x70>)
 80037c8:	f7fe fcde 	bl	8002188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037cc:	480b      	ldr	r0, [pc, #44]	; (80037fc <prvInitialiseTaskLists+0x74>)
 80037ce:	f7fe fcdb 	bl	8002188 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037d2:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <prvInitialiseTaskLists+0x78>)
 80037d4:	4a05      	ldr	r2, [pc, #20]	; (80037ec <prvInitialiseTaskLists+0x64>)
 80037d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037d8:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <prvInitialiseTaskLists+0x7c>)
 80037da:	4a05      	ldr	r2, [pc, #20]	; (80037f0 <prvInitialiseTaskLists+0x68>)
 80037dc:	601a      	str	r2, [r3, #0]
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200007d4 	.word	0x200007d4
 80037ec:	20000c34 	.word	0x20000c34
 80037f0:	20000c48 	.word	0x20000c48
 80037f4:	20000c64 	.word	0x20000c64
 80037f8:	20000c78 	.word	0x20000c78
 80037fc:	20000c90 	.word	0x20000c90
 8003800:	20000c5c 	.word	0x20000c5c
 8003804:	20000c60 	.word	0x20000c60

08003808 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800380e:	e019      	b.n	8003844 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003810:	f000 fdd0 	bl	80043b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003814:	4b10      	ldr	r3, [pc, #64]	; (8003858 <prvCheckTasksWaitingTermination+0x50>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3304      	adds	r3, #4
 8003820:	4618      	mov	r0, r3
 8003822:	f7fe fd3b 	bl	800229c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <prvCheckTasksWaitingTermination+0x54>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3b01      	subs	r3, #1
 800382c:	4a0b      	ldr	r2, [pc, #44]	; (800385c <prvCheckTasksWaitingTermination+0x54>)
 800382e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <prvCheckTasksWaitingTermination+0x58>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3b01      	subs	r3, #1
 8003836:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <prvCheckTasksWaitingTermination+0x58>)
 8003838:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800383a:	f000 fdeb 	bl	8004414 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f810 	bl	8003864 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <prvCheckTasksWaitingTermination+0x58>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1e1      	bne.n	8003810 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800384c:	bf00      	nop
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000c78 	.word	0x20000c78
 800385c:	20000ca4 	.word	0x20000ca4
 8003860:	20000c8c 	.word	0x20000c8c

08003864 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	4618      	mov	r0, r3
 800387c:	f000 ff88 	bl	8004790 <vPortFree>
				vPortFree( pxTCB );
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 ff85 	bl	8004790 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003886:	e018      	b.n	80038ba <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800388e:	2b01      	cmp	r3, #1
 8003890:	d103      	bne.n	800389a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 ff7c 	bl	8004790 <vPortFree>
	}
 8003898:	e00f      	b.n	80038ba <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d00a      	beq.n	80038ba <prvDeleteTCB+0x56>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	60fb      	str	r3, [r7, #12]
}
 80038b6:	bf00      	nop
 80038b8:	e7fe      	b.n	80038b8 <prvDeleteTCB+0x54>
	}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038ca:	4b0c      	ldr	r3, [pc, #48]	; (80038fc <prvResetNextTaskUnblockTime+0x38>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d104      	bne.n	80038de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038d4:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <prvResetNextTaskUnblockTime+0x3c>)
 80038d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038dc:	e008      	b.n	80038f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <prvResetNextTaskUnblockTime+0x38>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4a04      	ldr	r2, [pc, #16]	; (8003900 <prvResetNextTaskUnblockTime+0x3c>)
 80038ee:	6013      	str	r3, [r2, #0]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	20000c5c 	.word	0x20000c5c
 8003900:	20000cc4 	.word	0x20000cc4

08003904 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800390a:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <xTaskGetSchedulerState+0x34>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003912:	2301      	movs	r3, #1
 8003914:	607b      	str	r3, [r7, #4]
 8003916:	e008      	b.n	800392a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003918:	4b08      	ldr	r3, [pc, #32]	; (800393c <xTaskGetSchedulerState+0x38>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d102      	bne.n	8003926 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003920:	2302      	movs	r3, #2
 8003922:	607b      	str	r3, [r7, #4]
 8003924:	e001      	b.n	800392a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800392a:	687b      	ldr	r3, [r7, #4]
	}
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	20000cb0 	.word	0x20000cb0
 800393c:	20000ccc 	.word	0x20000ccc

08003940 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d056      	beq.n	8003a04 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003956:	4b2e      	ldr	r3, [pc, #184]	; (8003a10 <xTaskPriorityDisinherit+0xd0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	429a      	cmp	r2, r3
 800395e:	d00a      	beq.n	8003976 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	60fb      	str	r3, [r7, #12]
}
 8003972:	bf00      	nop
 8003974:	e7fe      	b.n	8003974 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	60bb      	str	r3, [r7, #8]
}
 8003990:	bf00      	nop
 8003992:	e7fe      	b.n	8003992 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003998:	1e5a      	subs	r2, r3, #1
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d02c      	beq.n	8003a04 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d128      	bne.n	8003a04 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	3304      	adds	r3, #4
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fe fc70 	bl	800229c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <xTaskPriorityDisinherit+0xd4>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d903      	bls.n	80039e4 <xTaskPriorityDisinherit+0xa4>
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	4a0c      	ldr	r2, [pc, #48]	; (8003a14 <xTaskPriorityDisinherit+0xd4>)
 80039e2:	6013      	str	r3, [r2, #0]
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <xTaskPriorityDisinherit+0xd8>)
 80039f2:	441a      	add	r2, r3
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f7fe fbf1 	bl	80021e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a00:	2301      	movs	r3, #1
 8003a02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a04:	697b      	ldr	r3, [r7, #20]
	}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	200007d0 	.word	0x200007d0
 8003a14:	20000cac 	.word	0x20000cac
 8003a18:	200007d4 	.word	0x200007d4

08003a1c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003a26:	4b21      	ldr	r3, [pc, #132]	; (8003aac <prvAddCurrentTaskToDelayedList+0x90>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a2c:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	3304      	adds	r3, #4
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fc32 	bl	800229c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a3e:	d10a      	bne.n	8003a56 <prvAddCurrentTaskToDelayedList+0x3a>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d007      	beq.n	8003a56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a46:	4b1a      	ldr	r3, [pc, #104]	; (8003ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	4819      	ldr	r0, [pc, #100]	; (8003ab4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a50:	f7fe fbc7 	bl	80021e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a54:	e026      	b.n	8003aa4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a5e:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d209      	bcs.n	8003a82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a6e:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	4b0f      	ldr	r3, [pc, #60]	; (8003ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3304      	adds	r3, #4
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4610      	mov	r0, r2
 8003a7c:	f7fe fbd5 	bl	800222a <vListInsert>
}
 8003a80:	e010      	b.n	8003aa4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a82:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b0a      	ldr	r3, [pc, #40]	; (8003ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f7fe fbcb 	bl	800222a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d202      	bcs.n	8003aa4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a9e:	4a08      	ldr	r2, [pc, #32]	; (8003ac0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6013      	str	r3, [r2, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	20000ca8 	.word	0x20000ca8
 8003ab0:	200007d0 	.word	0x200007d0
 8003ab4:	20000c90 	.word	0x20000c90
 8003ab8:	20000c60 	.word	0x20000c60
 8003abc:	20000c5c 	.word	0x20000c5c
 8003ac0:	20000cc4 	.word	0x20000cc4

08003ac4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	; 0x28
 8003ac8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003ace:	f000 fb07 	bl	80040e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003ad2:	4b1c      	ldr	r3, [pc, #112]	; (8003b44 <xTimerCreateTimerTask+0x80>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d021      	beq.n	8003b1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ae2:	1d3a      	adds	r2, r7, #4
 8003ae4:	f107 0108 	add.w	r1, r7, #8
 8003ae8:	f107 030c 	add.w	r3, r7, #12
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fe fb31 	bl	8002154 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	9202      	str	r2, [sp, #8]
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	2302      	movs	r3, #2
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	2300      	movs	r3, #0
 8003b02:	460a      	mov	r2, r1
 8003b04:	4910      	ldr	r1, [pc, #64]	; (8003b48 <xTimerCreateTimerTask+0x84>)
 8003b06:	4811      	ldr	r0, [pc, #68]	; (8003b4c <xTimerCreateTimerTask+0x88>)
 8003b08:	f7ff f8de 	bl	8002cc8 <xTaskCreateStatic>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	4a10      	ldr	r2, [pc, #64]	; (8003b50 <xTimerCreateTimerTask+0x8c>)
 8003b10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003b12:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <xTimerCreateTimerTask+0x8c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	613b      	str	r3, [r7, #16]
}
 8003b36:	bf00      	nop
 8003b38:	e7fe      	b.n	8003b38 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003b3a:	697b      	ldr	r3, [r7, #20]
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3718      	adds	r7, #24
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000d00 	.word	0x20000d00
 8003b48:	08004aa0 	.word	0x08004aa0
 8003b4c:	08003c89 	.word	0x08003c89
 8003b50:	20000d04 	.word	0x20000d04

08003b54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	623b      	str	r3, [r7, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	e7fe      	b.n	8003b80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003b82:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <xTimerGenericCommand+0x98>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d02a      	beq.n	8003be0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b05      	cmp	r3, #5
 8003b9a:	dc18      	bgt.n	8003bce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b9c:	f7ff feb2 	bl	8003904 <xTaskGetSchedulerState>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d109      	bne.n	8003bba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ba6:	4b11      	ldr	r3, [pc, #68]	; (8003bec <xTimerGenericCommand+0x98>)
 8003ba8:	6818      	ldr	r0, [r3, #0]
 8003baa:	f107 0110 	add.w	r1, r7, #16
 8003bae:	2300      	movs	r3, #0
 8003bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bb2:	f7fe fca1 	bl	80024f8 <xQueueGenericSend>
 8003bb6:	6278      	str	r0, [r7, #36]	; 0x24
 8003bb8:	e012      	b.n	8003be0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003bba:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <xTimerGenericCommand+0x98>)
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	f107 0110 	add.w	r1, r7, #16
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f7fe fc97 	bl	80024f8 <xQueueGenericSend>
 8003bca:	6278      	str	r0, [r7, #36]	; 0x24
 8003bcc:	e008      	b.n	8003be0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003bce:	4b07      	ldr	r3, [pc, #28]	; (8003bec <xTimerGenericCommand+0x98>)
 8003bd0:	6818      	ldr	r0, [r3, #0]
 8003bd2:	f107 0110 	add.w	r1, r7, #16
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	f7fe fd8b 	bl	80026f4 <xQueueGenericSendFromISR>
 8003bde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3728      	adds	r7, #40	; 0x28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000d00 	.word	0x20000d00

08003bf0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af02      	add	r7, sp, #8
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bfa:	4b22      	ldr	r3, [pc, #136]	; (8003c84 <prvProcessExpiredTimer+0x94>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	3304      	adds	r3, #4
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fe fb47 	bl	800229c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d022      	beq.n	8003c62 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	18d1      	adds	r1, r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	6978      	ldr	r0, [r7, #20]
 8003c2a:	f000 f8d1 	bl	8003dd0 <prvInsertTimerInActiveList>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01f      	beq.n	8003c74 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c34:	2300      	movs	r3, #0
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	6978      	ldr	r0, [r7, #20]
 8003c40:	f7ff ff88 	bl	8003b54 <xTimerGenericCommand>
 8003c44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d113      	bne.n	8003c74 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	60fb      	str	r3, [r7, #12]
}
 8003c5e:	bf00      	nop
 8003c60:	e7fe      	b.n	8003c60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	6978      	ldr	r0, [r7, #20]
 8003c7a:	4798      	blx	r3
}
 8003c7c:	bf00      	nop
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000cf8 	.word	0x20000cf8

08003c88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003c90:	f107 0308 	add.w	r3, r7, #8
 8003c94:	4618      	mov	r0, r3
 8003c96:	f000 f857 	bl	8003d48 <prvGetNextExpireTime>
 8003c9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f803 	bl	8003cac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003ca6:	f000 f8d5 	bl	8003e54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003caa:	e7f1      	b.n	8003c90 <prvTimerTask+0x8>

08003cac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003cb6:	f7ff fa43 	bl	8003140 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cba:	f107 0308 	add.w	r3, r7, #8
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 f866 	bl	8003d90 <prvSampleTimeNow>
 8003cc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d130      	bne.n	8003d2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <prvProcessTimerOrBlockTask+0x3c>
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d806      	bhi.n	8003ce8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003cda:	f7ff fa3f 	bl	800315c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003cde:	68f9      	ldr	r1, [r7, #12]
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff ff85 	bl	8003bf0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003ce6:	e024      	b.n	8003d32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003cee:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <prvProcessTimerOrBlockTask+0x90>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <prvProcessTimerOrBlockTask+0x50>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <prvProcessTimerOrBlockTask+0x52>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d00:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <prvProcessTimerOrBlockTask+0x94>)
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	f7fe ffa7 	bl	8002c60 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003d12:	f7ff fa23 	bl	800315c <xTaskResumeAll>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <prvProcessTimerOrBlockTask+0x98>)
 8003d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	f3bf 8f6f 	isb	sy
}
 8003d2c:	e001      	b.n	8003d32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003d2e:	f7ff fa15 	bl	800315c <xTaskResumeAll>
}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000cfc 	.word	0x20000cfc
 8003d40:	20000d00 	.word	0x20000d00
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d50:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <prvGetNextExpireTime+0x44>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <prvGetNextExpireTime+0x16>
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	e000      	b.n	8003d60 <prvGetNextExpireTime+0x18>
 8003d5e:	2200      	movs	r2, #0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <prvGetNextExpireTime+0x44>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	60fb      	str	r3, [r7, #12]
 8003d76:	e001      	b.n	8003d7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20000cf8 	.word	0x20000cf8

08003d90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003d98:	f7ff fa7e 	bl	8003298 <xTaskGetTickCount>
 8003d9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <prvSampleTimeNow+0x3c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d205      	bcs.n	8003db4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003da8:	f000 f936 	bl	8004018 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	e002      	b.n	8003dba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003dba:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <prvSampleTimeNow+0x3c>)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000d08 	.word	0x20000d08

08003dd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d812      	bhi.n	8003e1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	1ad2      	subs	r2, r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d302      	bcc.n	8003e0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e04:	2301      	movs	r3, #1
 8003e06:	617b      	str	r3, [r7, #20]
 8003e08:	e01b      	b.n	8003e42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <prvInsertTimerInActiveList+0x7c>)
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4619      	mov	r1, r3
 8003e14:	4610      	mov	r0, r2
 8003e16:	f7fe fa08 	bl	800222a <vListInsert>
 8003e1a:	e012      	b.n	8003e42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d206      	bcs.n	8003e32 <prvInsertTimerInActiveList+0x62>
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d302      	bcc.n	8003e32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	e007      	b.n	8003e42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e32:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <prvInsertTimerInActiveList+0x80>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	f7fe f9f4 	bl	800222a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003e42:	697b      	ldr	r3, [r7, #20]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000cfc 	.word	0x20000cfc
 8003e50:	20000cf8 	.word	0x20000cf8

08003e54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08e      	sub	sp, #56	; 0x38
 8003e58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e5a:	e0ca      	b.n	8003ff2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	da18      	bge.n	8003e94 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003e62:	1d3b      	adds	r3, r7, #4
 8003e64:	3304      	adds	r3, #4
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10a      	bne.n	8003e84 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	61fb      	str	r3, [r7, #28]
}
 8003e80:	bf00      	nop
 8003e82:	e7fe      	b.n	8003e82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e8a:	6850      	ldr	r0, [r2, #4]
 8003e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e8e:	6892      	ldr	r2, [r2, #8]
 8003e90:	4611      	mov	r1, r2
 8003e92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f2c0 80ab 	blt.w	8003ff2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d004      	beq.n	8003eb2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fe f9f5 	bl	800229c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff6b 	bl	8003d90 <prvSampleTimeNow>
 8003eba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b09      	cmp	r3, #9
 8003ec0:	f200 8096 	bhi.w	8003ff0 <prvProcessReceivedCommands+0x19c>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <prvProcessReceivedCommands+0x78>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003ef5 	.word	0x08003ef5
 8003ed0:	08003ef5 	.word	0x08003ef5
 8003ed4:	08003ef5 	.word	0x08003ef5
 8003ed8:	08003f69 	.word	0x08003f69
 8003edc:	08003f7d 	.word	0x08003f7d
 8003ee0:	08003fc7 	.word	0x08003fc7
 8003ee4:	08003ef5 	.word	0x08003ef5
 8003ee8:	08003ef5 	.word	0x08003ef5
 8003eec:	08003f69 	.word	0x08003f69
 8003ef0:	08003f7d 	.word	0x08003f7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	18d1      	adds	r1, r2, r3
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f14:	f7ff ff5c 	bl	8003dd0 <prvInsertTimerInActiveList>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d069      	beq.n	8003ff2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d05e      	beq.n	8003ff2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	441a      	add	r2, r3
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	2300      	movs	r3, #0
 8003f42:	2100      	movs	r1, #0
 8003f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f46:	f7ff fe05 	bl	8003b54 <xTimerGenericCommand>
 8003f4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d14f      	bne.n	8003ff2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	61bb      	str	r3, [r7, #24]
}
 8003f64:	bf00      	nop
 8003f66:	e7fe      	b.n	8003f66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f6e:	f023 0301 	bic.w	r3, r3, #1
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003f7a:	e03a      	b.n	8003ff2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	617b      	str	r3, [r7, #20]
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	18d1      	adds	r1, r2, r3
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fc0:	f7ff ff06 	bl	8003dd0 <prvInsertTimerInActiveList>
					break;
 8003fc4:	e015      	b.n	8003ff2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d103      	bne.n	8003fdc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fd6:	f000 fbdb 	bl	8004790 <vPortFree>
 8003fda:	e00a      	b.n	8003ff2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003fee:	e000      	b.n	8003ff2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003ff0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <prvProcessReceivedCommands+0x1c0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	1d39      	adds	r1, r7, #4
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe fc16 	bl	800282c <xQueueReceive>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	f47f af2a 	bne.w	8003e5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004008:	bf00      	nop
 800400a:	bf00      	nop
 800400c:	3730      	adds	r7, #48	; 0x30
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000d00 	.word	0x20000d00

08004018 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800401e:	e048      	b.n	80040b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004020:	4b2d      	ldr	r3, [pc, #180]	; (80040d8 <prvSwitchTimerLists+0xc0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800402a:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <prvSwitchTimerLists+0xc0>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3304      	adds	r3, #4
 8004038:	4618      	mov	r0, r3
 800403a:	f7fe f92f 	bl	800229c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02e      	beq.n	80040b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4413      	add	r3, r2
 800405c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	429a      	cmp	r2, r3
 8004064:	d90e      	bls.n	8004084 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004072:	4b19      	ldr	r3, [pc, #100]	; (80040d8 <prvSwitchTimerLists+0xc0>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3304      	adds	r3, #4
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f7fe f8d4 	bl	800222a <vListInsert>
 8004082:	e016      	b.n	80040b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004084:	2300      	movs	r3, #0
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	2300      	movs	r3, #0
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	2100      	movs	r1, #0
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f7ff fd60 	bl	8003b54 <xTimerGenericCommand>
 8004094:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800409c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a0:	f383 8811 	msr	BASEPRI, r3
 80040a4:	f3bf 8f6f 	isb	sy
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	603b      	str	r3, [r7, #0]
}
 80040ae:	bf00      	nop
 80040b0:	e7fe      	b.n	80040b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040b2:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <prvSwitchTimerLists+0xc0>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1b1      	bne.n	8004020 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <prvSwitchTimerLists+0xc0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <prvSwitchTimerLists+0xc4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a04      	ldr	r2, [pc, #16]	; (80040d8 <prvSwitchTimerLists+0xc0>)
 80040c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80040ca:	4a04      	ldr	r2, [pc, #16]	; (80040dc <prvSwitchTimerLists+0xc4>)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	6013      	str	r3, [r2, #0]
}
 80040d0:	bf00      	nop
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000cf8 	.word	0x20000cf8
 80040dc:	20000cfc 	.word	0x20000cfc

080040e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80040e6:	f000 f965 	bl	80043b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80040ea:	4b15      	ldr	r3, [pc, #84]	; (8004140 <prvCheckForValidListAndQueue+0x60>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d120      	bne.n	8004134 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80040f2:	4814      	ldr	r0, [pc, #80]	; (8004144 <prvCheckForValidListAndQueue+0x64>)
 80040f4:	f7fe f848 	bl	8002188 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80040f8:	4813      	ldr	r0, [pc, #76]	; (8004148 <prvCheckForValidListAndQueue+0x68>)
 80040fa:	f7fe f845 	bl	8002188 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80040fe:	4b13      	ldr	r3, [pc, #76]	; (800414c <prvCheckForValidListAndQueue+0x6c>)
 8004100:	4a10      	ldr	r2, [pc, #64]	; (8004144 <prvCheckForValidListAndQueue+0x64>)
 8004102:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004104:	4b12      	ldr	r3, [pc, #72]	; (8004150 <prvCheckForValidListAndQueue+0x70>)
 8004106:	4a10      	ldr	r2, [pc, #64]	; (8004148 <prvCheckForValidListAndQueue+0x68>)
 8004108:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800410a:	2300      	movs	r3, #0
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	4b11      	ldr	r3, [pc, #68]	; (8004154 <prvCheckForValidListAndQueue+0x74>)
 8004110:	4a11      	ldr	r2, [pc, #68]	; (8004158 <prvCheckForValidListAndQueue+0x78>)
 8004112:	2110      	movs	r1, #16
 8004114:	200a      	movs	r0, #10
 8004116:	f7fe f953 	bl	80023c0 <xQueueGenericCreateStatic>
 800411a:	4603      	mov	r3, r0
 800411c:	4a08      	ldr	r2, [pc, #32]	; (8004140 <prvCheckForValidListAndQueue+0x60>)
 800411e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004120:	4b07      	ldr	r3, [pc, #28]	; (8004140 <prvCheckForValidListAndQueue+0x60>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d005      	beq.n	8004134 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004128:	4b05      	ldr	r3, [pc, #20]	; (8004140 <prvCheckForValidListAndQueue+0x60>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	490b      	ldr	r1, [pc, #44]	; (800415c <prvCheckForValidListAndQueue+0x7c>)
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe fd6c 	bl	8002c0c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004134:	f000 f96e 	bl	8004414 <vPortExitCritical>
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20000d00 	.word	0x20000d00
 8004144:	20000cd0 	.word	0x20000cd0
 8004148:	20000ce4 	.word	0x20000ce4
 800414c:	20000cf8 	.word	0x20000cf8
 8004150:	20000cfc 	.word	0x20000cfc
 8004154:	20000dac 	.word	0x20000dac
 8004158:	20000d0c 	.word	0x20000d0c
 800415c:	08004aa8 	.word	0x08004aa8

08004160 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3b04      	subs	r3, #4
 8004170:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3b04      	subs	r3, #4
 800417e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f023 0201 	bic.w	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	3b04      	subs	r3, #4
 800418e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004190:	4a0c      	ldr	r2, [pc, #48]	; (80041c4 <pxPortInitialiseStack+0x64>)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	3b14      	subs	r3, #20
 800419a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3b04      	subs	r3, #4
 80041a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f06f 0202 	mvn.w	r2, #2
 80041ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3b20      	subs	r3, #32
 80041b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041b6:	68fb      	ldr	r3, [r7, #12]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	080041c9 	.word	0x080041c9

080041c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041d2:	4b12      	ldr	r3, [pc, #72]	; (800421c <prvTaskExitError+0x54>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041da:	d00a      	beq.n	80041f2 <prvTaskExitError+0x2a>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60fb      	str	r3, [r7, #12]
}
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <prvTaskExitError+0x28>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	60bb      	str	r3, [r7, #8]
}
 8004204:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004206:	bf00      	nop
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d0fc      	beq.n	8004208 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800420e:	bf00      	nop
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	2000000c 	.word	0x2000000c

08004220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004220:	4b07      	ldr	r3, [pc, #28]	; (8004240 <pxCurrentTCBConst2>)
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	6808      	ldr	r0, [r1, #0]
 8004226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422a:	f380 8809 	msr	PSP, r0
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8811 	msr	BASEPRI, r0
 800423a:	4770      	bx	lr
 800423c:	f3af 8000 	nop.w

08004240 <pxCurrentTCBConst2>:
 8004240:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop

08004248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004248:	4808      	ldr	r0, [pc, #32]	; (800426c <prvPortStartFirstTask+0x24>)
 800424a:	6800      	ldr	r0, [r0, #0]
 800424c:	6800      	ldr	r0, [r0, #0]
 800424e:	f380 8808 	msr	MSP, r0
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8814 	msr	CONTROL, r0
 800425a:	b662      	cpsie	i
 800425c:	b661      	cpsie	f
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	df00      	svc	0
 8004268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800426a:	bf00      	nop
 800426c:	e000ed08 	.word	0xe000ed08

08004270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004276:	4b46      	ldr	r3, [pc, #280]	; (8004390 <xPortStartScheduler+0x120>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a46      	ldr	r2, [pc, #280]	; (8004394 <xPortStartScheduler+0x124>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10a      	bne.n	8004296 <xPortStartScheduler+0x26>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	613b      	str	r3, [r7, #16]
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004296:	4b3e      	ldr	r3, [pc, #248]	; (8004390 <xPortStartScheduler+0x120>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a3f      	ldr	r2, [pc, #252]	; (8004398 <xPortStartScheduler+0x128>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d10a      	bne.n	80042b6 <xPortStartScheduler+0x46>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	60fb      	str	r3, [r7, #12]
}
 80042b2:	bf00      	nop
 80042b4:	e7fe      	b.n	80042b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042b6:	4b39      	ldr	r3, [pc, #228]	; (800439c <xPortStartScheduler+0x12c>)
 80042b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	22ff      	movs	r2, #255	; 0xff
 80042c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	4b31      	ldr	r3, [pc, #196]	; (80043a0 <xPortStartScheduler+0x130>)
 80042dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042de:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <xPortStartScheduler+0x134>)
 80042e0:	2207      	movs	r2, #7
 80042e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042e4:	e009      	b.n	80042fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80042e6:	4b2f      	ldr	r3, [pc, #188]	; (80043a4 <xPortStartScheduler+0x134>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	4a2d      	ldr	r2, [pc, #180]	; (80043a4 <xPortStartScheduler+0x134>)
 80042ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042f0:	78fb      	ldrb	r3, [r7, #3]
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004302:	2b80      	cmp	r3, #128	; 0x80
 8004304:	d0ef      	beq.n	80042e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004306:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <xPortStartScheduler+0x134>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f1c3 0307 	rsb	r3, r3, #7
 800430e:	2b04      	cmp	r3, #4
 8004310:	d00a      	beq.n	8004328 <xPortStartScheduler+0xb8>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	60bb      	str	r3, [r7, #8]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004328:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <xPortStartScheduler+0x134>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	4a1d      	ldr	r2, [pc, #116]	; (80043a4 <xPortStartScheduler+0x134>)
 8004330:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004332:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <xPortStartScheduler+0x134>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800433a:	4a1a      	ldr	r2, [pc, #104]	; (80043a4 <xPortStartScheduler+0x134>)
 800433c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004346:	4b18      	ldr	r3, [pc, #96]	; (80043a8 <xPortStartScheduler+0x138>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a17      	ldr	r2, [pc, #92]	; (80043a8 <xPortStartScheduler+0x138>)
 800434c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004350:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004352:	4b15      	ldr	r3, [pc, #84]	; (80043a8 <xPortStartScheduler+0x138>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a14      	ldr	r2, [pc, #80]	; (80043a8 <xPortStartScheduler+0x138>)
 8004358:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800435c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800435e:	f000 f8dd 	bl	800451c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004362:	4b12      	ldr	r3, [pc, #72]	; (80043ac <xPortStartScheduler+0x13c>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004368:	f000 f8fc 	bl	8004564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800436c:	4b10      	ldr	r3, [pc, #64]	; (80043b0 <xPortStartScheduler+0x140>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0f      	ldr	r2, [pc, #60]	; (80043b0 <xPortStartScheduler+0x140>)
 8004372:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004376:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004378:	f7ff ff66 	bl	8004248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800437c:	f7ff f856 	bl	800342c <vTaskSwitchContext>
	prvTaskExitError();
 8004380:	f7ff ff22 	bl	80041c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	e000ed00 	.word	0xe000ed00
 8004394:	410fc271 	.word	0x410fc271
 8004398:	410fc270 	.word	0x410fc270
 800439c:	e000e400 	.word	0xe000e400
 80043a0:	20000dfc 	.word	0x20000dfc
 80043a4:	20000e00 	.word	0x20000e00
 80043a8:	e000ed20 	.word	0xe000ed20
 80043ac:	2000000c 	.word	0x2000000c
 80043b0:	e000ef34 	.word	0xe000ef34

080043b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
	__asm volatile
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	607b      	str	r3, [r7, #4]
}
 80043cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043ce:	4b0f      	ldr	r3, [pc, #60]	; (800440c <vPortEnterCritical+0x58>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3301      	adds	r3, #1
 80043d4:	4a0d      	ldr	r2, [pc, #52]	; (800440c <vPortEnterCritical+0x58>)
 80043d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <vPortEnterCritical+0x58>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d10f      	bne.n	8004400 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <vPortEnterCritical+0x5c>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <vPortEnterCritical+0x4c>
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	603b      	str	r3, [r7, #0]
}
 80043fc:	bf00      	nop
 80043fe:	e7fe      	b.n	80043fe <vPortEnterCritical+0x4a>
	}
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	2000000c 	.word	0x2000000c
 8004410:	e000ed04 	.word	0xe000ed04

08004414 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800441a:	4b12      	ldr	r3, [pc, #72]	; (8004464 <vPortExitCritical+0x50>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <vPortExitCritical+0x24>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	607b      	str	r3, [r7, #4]
}
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004438:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <vPortExitCritical+0x50>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3b01      	subs	r3, #1
 800443e:	4a09      	ldr	r2, [pc, #36]	; (8004464 <vPortExitCritical+0x50>)
 8004440:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004442:	4b08      	ldr	r3, [pc, #32]	; (8004464 <vPortExitCritical+0x50>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d105      	bne.n	8004456 <vPortExitCritical+0x42>
 800444a:	2300      	movs	r3, #0
 800444c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	f383 8811 	msr	BASEPRI, r3
}
 8004454:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	2000000c 	.word	0x2000000c
	...

08004470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004470:	f3ef 8009 	mrs	r0, PSP
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	4b15      	ldr	r3, [pc, #84]	; (80044d0 <pxCurrentTCBConst>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	f01e 0f10 	tst.w	lr, #16
 8004480:	bf08      	it	eq
 8004482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448a:	6010      	str	r0, [r2, #0]
 800448c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004494:	f380 8811 	msr	BASEPRI, r0
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f7fe ffc4 	bl	800342c <vTaskSwitchContext>
 80044a4:	f04f 0000 	mov.w	r0, #0
 80044a8:	f380 8811 	msr	BASEPRI, r0
 80044ac:	bc09      	pop	{r0, r3}
 80044ae:	6819      	ldr	r1, [r3, #0]
 80044b0:	6808      	ldr	r0, [r1, #0]
 80044b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b6:	f01e 0f10 	tst.w	lr, #16
 80044ba:	bf08      	it	eq
 80044bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044c0:	f380 8809 	msr	PSP, r0
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	f3af 8000 	nop.w

080044d0 <pxCurrentTCBConst>:
 80044d0:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop

080044d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	607b      	str	r3, [r7, #4]
}
 80044f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044f2:	f7fe fee1 	bl	80032b8 <xTaskIncrementTick>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <xPortSysTickHandler+0x40>)
 80044fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f383 8811 	msr	BASEPRI, r3
}
 800450e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	e000ed04 	.word	0xe000ed04

0800451c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <vPortSetupTimerInterrupt+0x34>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <vPortSetupTimerInterrupt+0x38>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <vPortSetupTimerInterrupt+0x3c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0a      	ldr	r2, [pc, #40]	; (800455c <vPortSetupTimerInterrupt+0x40>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	099b      	lsrs	r3, r3, #6
 8004538:	4a09      	ldr	r2, [pc, #36]	; (8004560 <vPortSetupTimerInterrupt+0x44>)
 800453a:	3b01      	subs	r3, #1
 800453c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800453e:	4b04      	ldr	r3, [pc, #16]	; (8004550 <vPortSetupTimerInterrupt+0x34>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	e000e010 	.word	0xe000e010
 8004554:	e000e018 	.word	0xe000e018
 8004558:	20000000 	.word	0x20000000
 800455c:	10624dd3 	.word	0x10624dd3
 8004560:	e000e014 	.word	0xe000e014

08004564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004564:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004574 <vPortEnableVFP+0x10>
 8004568:	6801      	ldr	r1, [r0, #0]
 800456a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800456e:	6001      	str	r1, [r0, #0]
 8004570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004572:	bf00      	nop
 8004574:	e000ed88 	.word	0xe000ed88

08004578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800457e:	f3ef 8305 	mrs	r3, IPSR
 8004582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b0f      	cmp	r3, #15
 8004588:	d914      	bls.n	80045b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800458a:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <vPortValidateInterruptPriority+0x70>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004594:	4b15      	ldr	r3, [pc, #84]	; (80045ec <vPortValidateInterruptPriority+0x74>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	7afa      	ldrb	r2, [r7, #11]
 800459a:	429a      	cmp	r2, r3
 800459c:	d20a      	bcs.n	80045b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	607b      	str	r3, [r7, #4]
}
 80045b0:	bf00      	nop
 80045b2:	e7fe      	b.n	80045b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045b4:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <vPortValidateInterruptPriority+0x78>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80045bc:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <vPortValidateInterruptPriority+0x7c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d90a      	bls.n	80045da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	603b      	str	r3, [r7, #0]
}
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <vPortValidateInterruptPriority+0x60>
	}
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	e000e3f0 	.word	0xe000e3f0
 80045ec:	20000dfc 	.word	0x20000dfc
 80045f0:	e000ed0c 	.word	0xe000ed0c
 80045f4:	20000e00 	.word	0x20000e00

080045f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	; 0x28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004604:	f7fe fd9c 	bl	8003140 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004608:	4b5b      	ldr	r3, [pc, #364]	; (8004778 <pvPortMalloc+0x180>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004610:	f000 f920 	bl	8004854 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004614:	4b59      	ldr	r3, [pc, #356]	; (800477c <pvPortMalloc+0x184>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	f040 8093 	bne.w	8004748 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01d      	beq.n	8004664 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004628:	2208      	movs	r2, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4413      	add	r3, r2
 800462e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	2b00      	cmp	r3, #0
 8004638:	d014      	beq.n	8004664 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f023 0307 	bic.w	r3, r3, #7
 8004640:	3308      	adds	r3, #8
 8004642:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <pvPortMalloc+0x6c>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	617b      	str	r3, [r7, #20]
}
 8004660:	bf00      	nop
 8004662:	e7fe      	b.n	8004662 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d06e      	beq.n	8004748 <pvPortMalloc+0x150>
 800466a:	4b45      	ldr	r3, [pc, #276]	; (8004780 <pvPortMalloc+0x188>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d869      	bhi.n	8004748 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004674:	4b43      	ldr	r3, [pc, #268]	; (8004784 <pvPortMalloc+0x18c>)
 8004676:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004678:	4b42      	ldr	r3, [pc, #264]	; (8004784 <pvPortMalloc+0x18c>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800467e:	e004      	b.n	800468a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d903      	bls.n	800469c <pvPortMalloc+0xa4>
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f1      	bne.n	8004680 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800469c:	4b36      	ldr	r3, [pc, #216]	; (8004778 <pvPortMalloc+0x180>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d050      	beq.n	8004748 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2208      	movs	r2, #8
 80046ac:	4413      	add	r3, r2
 80046ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	1ad2      	subs	r2, r2, r3
 80046c0:	2308      	movs	r3, #8
 80046c2:	005b      	lsls	r3, r3, #1
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d91f      	bls.n	8004708 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4413      	add	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <pvPortMalloc+0xf8>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	613b      	str	r3, [r7, #16]
}
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	1ad2      	subs	r2, r2, r3
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004702:	69b8      	ldr	r0, [r7, #24]
 8004704:	f000 f908 	bl	8004918 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004708:	4b1d      	ldr	r3, [pc, #116]	; (8004780 <pvPortMalloc+0x188>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	4a1b      	ldr	r2, [pc, #108]	; (8004780 <pvPortMalloc+0x188>)
 8004714:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004716:	4b1a      	ldr	r3, [pc, #104]	; (8004780 <pvPortMalloc+0x188>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4b1b      	ldr	r3, [pc, #108]	; (8004788 <pvPortMalloc+0x190>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d203      	bcs.n	800472a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004722:	4b17      	ldr	r3, [pc, #92]	; (8004780 <pvPortMalloc+0x188>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a18      	ldr	r2, [pc, #96]	; (8004788 <pvPortMalloc+0x190>)
 8004728:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	4b13      	ldr	r3, [pc, #76]	; (800477c <pvPortMalloc+0x184>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	431a      	orrs	r2, r3
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800473e:	4b13      	ldr	r3, [pc, #76]	; (800478c <pvPortMalloc+0x194>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3301      	adds	r3, #1
 8004744:	4a11      	ldr	r2, [pc, #68]	; (800478c <pvPortMalloc+0x194>)
 8004746:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004748:	f7fe fd08 	bl	800315c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <pvPortMalloc+0x174>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	60fb      	str	r3, [r7, #12]
}
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <pvPortMalloc+0x172>
	return pvReturn;
 800476c:	69fb      	ldr	r3, [r7, #28]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3728      	adds	r7, #40	; 0x28
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20004a0c 	.word	0x20004a0c
 800477c:	20004a20 	.word	0x20004a20
 8004780:	20004a10 	.word	0x20004a10
 8004784:	20004a04 	.word	0x20004a04
 8004788:	20004a14 	.word	0x20004a14
 800478c:	20004a18 	.word	0x20004a18

08004790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d04d      	beq.n	800483e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047a2:	2308      	movs	r3, #8
 80047a4:	425b      	negs	r3, r3
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4413      	add	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	685a      	ldr	r2, [r3, #4]
 80047b4:	4b24      	ldr	r3, [pc, #144]	; (8004848 <vPortFree+0xb8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10a      	bne.n	80047d4 <vPortFree+0x44>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	60fb      	str	r3, [r7, #12]
}
 80047d0:	bf00      	nop
 80047d2:	e7fe      	b.n	80047d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <vPortFree+0x62>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	60bb      	str	r3, [r7, #8]
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	4b14      	ldr	r3, [pc, #80]	; (8004848 <vPortFree+0xb8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01e      	beq.n	800483e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d11a      	bne.n	800483e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	4b0e      	ldr	r3, [pc, #56]	; (8004848 <vPortFree+0xb8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	43db      	mvns	r3, r3
 8004812:	401a      	ands	r2, r3
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004818:	f7fe fc92 	bl	8003140 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	4b0a      	ldr	r3, [pc, #40]	; (800484c <vPortFree+0xbc>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4413      	add	r3, r2
 8004826:	4a09      	ldr	r2, [pc, #36]	; (800484c <vPortFree+0xbc>)
 8004828:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800482a:	6938      	ldr	r0, [r7, #16]
 800482c:	f000 f874 	bl	8004918 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004830:	4b07      	ldr	r3, [pc, #28]	; (8004850 <vPortFree+0xc0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	4a06      	ldr	r2, [pc, #24]	; (8004850 <vPortFree+0xc0>)
 8004838:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800483a:	f7fe fc8f 	bl	800315c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800483e:	bf00      	nop
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20004a20 	.word	0x20004a20
 800484c:	20004a10 	.word	0x20004a10
 8004850:	20004a1c 	.word	0x20004a1c

08004854 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800485a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800485e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004860:	4b27      	ldr	r3, [pc, #156]	; (8004900 <prvHeapInit+0xac>)
 8004862:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00c      	beq.n	8004888 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	3307      	adds	r3, #7
 8004872:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0307 	bic.w	r3, r3, #7
 800487a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	4a1f      	ldr	r2, [pc, #124]	; (8004900 <prvHeapInit+0xac>)
 8004884:	4413      	add	r3, r2
 8004886:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800488c:	4a1d      	ldr	r2, [pc, #116]	; (8004904 <prvHeapInit+0xb0>)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004892:	4b1c      	ldr	r3, [pc, #112]	; (8004904 <prvHeapInit+0xb0>)
 8004894:	2200      	movs	r2, #0
 8004896:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	4413      	add	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048a0:	2208      	movs	r2, #8
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0307 	bic.w	r3, r3, #7
 80048ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4a15      	ldr	r2, [pc, #84]	; (8004908 <prvHeapInit+0xb4>)
 80048b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048b6:	4b14      	ldr	r3, [pc, #80]	; (8004908 <prvHeapInit+0xb4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2200      	movs	r2, #0
 80048bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80048be:	4b12      	ldr	r3, [pc, #72]	; (8004908 <prvHeapInit+0xb4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2200      	movs	r2, #0
 80048c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	1ad2      	subs	r2, r2, r3
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048d4:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <prvHeapInit+0xb4>)
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	4a0a      	ldr	r2, [pc, #40]	; (800490c <prvHeapInit+0xb8>)
 80048e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	4a09      	ldr	r2, [pc, #36]	; (8004910 <prvHeapInit+0xbc>)
 80048ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048ec:	4b09      	ldr	r3, [pc, #36]	; (8004914 <prvHeapInit+0xc0>)
 80048ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048f2:	601a      	str	r2, [r3, #0]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	20000e04 	.word	0x20000e04
 8004904:	20004a04 	.word	0x20004a04
 8004908:	20004a0c 	.word	0x20004a0c
 800490c:	20004a14 	.word	0x20004a14
 8004910:	20004a10 	.word	0x20004a10
 8004914:	20004a20 	.word	0x20004a20

08004918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004920:	4b28      	ldr	r3, [pc, #160]	; (80049c4 <prvInsertBlockIntoFreeList+0xac>)
 8004922:	60fb      	str	r3, [r7, #12]
 8004924:	e002      	b.n	800492c <prvInsertBlockIntoFreeList+0x14>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	429a      	cmp	r2, r3
 8004934:	d8f7      	bhi.n	8004926 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	4413      	add	r3, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	429a      	cmp	r2, r3
 8004946:	d108      	bne.n	800495a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	441a      	add	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	68ba      	ldr	r2, [r7, #8]
 8004964:	441a      	add	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d118      	bne.n	80049a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d00d      	beq.n	8004996 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	441a      	add	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	e008      	b.n	80049a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004996:	4b0c      	ldr	r3, [pc, #48]	; (80049c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	e003      	b.n	80049a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d002      	beq.n	80049b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	20004a04 	.word	0x20004a04
 80049c8:	20004a0c 	.word	0x20004a0c

080049cc <memset>:
 80049cc:	4402      	add	r2, r0
 80049ce:	4603      	mov	r3, r0
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d100      	bne.n	80049d6 <memset+0xa>
 80049d4:	4770      	bx	lr
 80049d6:	f803 1b01 	strb.w	r1, [r3], #1
 80049da:	e7f9      	b.n	80049d0 <memset+0x4>

080049dc <__libc_init_array>:
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	4d0d      	ldr	r5, [pc, #52]	; (8004a14 <__libc_init_array+0x38>)
 80049e0:	4c0d      	ldr	r4, [pc, #52]	; (8004a18 <__libc_init_array+0x3c>)
 80049e2:	1b64      	subs	r4, r4, r5
 80049e4:	10a4      	asrs	r4, r4, #2
 80049e6:	2600      	movs	r6, #0
 80049e8:	42a6      	cmp	r6, r4
 80049ea:	d109      	bne.n	8004a00 <__libc_init_array+0x24>
 80049ec:	4d0b      	ldr	r5, [pc, #44]	; (8004a1c <__libc_init_array+0x40>)
 80049ee:	4c0c      	ldr	r4, [pc, #48]	; (8004a20 <__libc_init_array+0x44>)
 80049f0:	f000 f826 	bl	8004a40 <_init>
 80049f4:	1b64      	subs	r4, r4, r5
 80049f6:	10a4      	asrs	r4, r4, #2
 80049f8:	2600      	movs	r6, #0
 80049fa:	42a6      	cmp	r6, r4
 80049fc:	d105      	bne.n	8004a0a <__libc_init_array+0x2e>
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a04:	4798      	blx	r3
 8004a06:	3601      	adds	r6, #1
 8004a08:	e7ee      	b.n	80049e8 <__libc_init_array+0xc>
 8004a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0e:	4798      	blx	r3
 8004a10:	3601      	adds	r6, #1
 8004a12:	e7f2      	b.n	80049fa <__libc_init_array+0x1e>
 8004a14:	08004af4 	.word	0x08004af4
 8004a18:	08004af4 	.word	0x08004af4
 8004a1c:	08004af4 	.word	0x08004af4
 8004a20:	08004af8 	.word	0x08004af8

08004a24 <memcpy>:
 8004a24:	440a      	add	r2, r1
 8004a26:	4291      	cmp	r1, r2
 8004a28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004a2c:	d100      	bne.n	8004a30 <memcpy+0xc>
 8004a2e:	4770      	bx	lr
 8004a30:	b510      	push	{r4, lr}
 8004a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	d1f9      	bne.n	8004a32 <memcpy+0xe>
 8004a3e:	bd10      	pop	{r4, pc}

08004a40 <_init>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr

08004a4c <_fini>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr
